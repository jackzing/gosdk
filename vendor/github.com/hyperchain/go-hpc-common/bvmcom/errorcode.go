package bvmcom

import (
	"fmt"

	code "github.com/hyperchain/go-hpc-common/errorcode"
)

// code of OpResult
const (
	SuccessCode           = 200
	MethodNotExistCode    = -30001
	ParamsLenMisMatchCode = -30002
	InvalidParamsCode     = -30003
	CallErrorCode         = -30004
)

// code of OpResult
var (
	CodeFatalError         = newCode(-5000, "system fatal error") // returns because of system bug
	CodeMSPInterError      = newCode(-5001, "there is inter error in msp")
	CodeInvalidInputParams = newCode(-5002, "invalid params")
	CodeMarshalFailed      = newCode(-5003, "marshal failed")
	CodeUnmarshalFailed    = newCode(-5004, "unmarshal failed")
	CodeReadWriteDBFailed  = newCode(-5005, "read or write db failed")

	CodeNotFoundSupportedVersions    = newCode(-5006, "not found supported versions")
	CodeNotFoundPeerSupportedVersion = newCode(-5007, "not found peer's supported version")
	CodeNotFoundRunningVersion       = newCode(-5008, "not found running versions")
	CodeNotFoundAvailableVersion     = newCode(-5009, "not found available versions")
	CodeIncompatible                 = newCode(-5010, "incompatible versions")
	CodePermissionError              = newCode(-5011, "no permission")
	CodeNotFoundMethod               = newCode(-5012, "not found method")
)

var _codes = make(map[int]string)

// newCode checks whether the code is unique or not.
func newCode(c int, message string) int {
	if _, ok := _codes[c]; ok {
		panic(fmt.Sprintf("error code: %d already exist", c))
	}
	_codes[c] = message
	return c
}

// NewCustomCallError creates and returns a new instance of customError, which
// generated by normal valid tx.
func NewCustomCallError(c int, format string, v ...interface{}) CustomCallError {
	desc := _codes[c]
	cErr := code.NewCustomError(c, desc, format, v...)
	err := &customError{RPCError: cErr, isInvalid: false}
	return err
}

// NewCustomInvalidCallError creates and returns a new instance of customError, which
// generated by invalid tx.
func NewCustomInvalidCallError(c int, format string, v ...interface{}) CustomCallError {
	desc := _codes[c]
	cErr := code.NewCustomError(c, desc, format, v...)
	err := &customError{RPCError: cErr, isInvalid: true}
	return err
}

// CustomCallError is the interface of our custom error code for bvm contract.
type CustomCallError interface {
	code.RPCError
	// IsInvalid returns true if it is an invalid tx, otherwise, it is a normal valid tx
	IsInvalid() bool
}

type customError struct {
	code.RPCError
	isInvalid bool // true means it should generate invalid tx, otherwise, it is a normal valid tx.
}

func (ce *customError) String() string {
	return ce.Error()
}

func (ce *customError) IsInvalid() bool {
	return ce.isInvalid
}
