// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: private.proto

package protos

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PrivateMessage_Type int32

const (
	PrivateMessage_PRIVATE_SYNC           PrivateMessage_Type = 0
	PrivateMessage_PRIVATE_SYNC_RESPONSE  PrivateMessage_Type = 1
	PrivateMessage_PRIVATE_QUERY          PrivateMessage_Type = 2
	PrivateMessage_PRIVATE_QUERY_RESPONSE PrivateMessage_Type = 3
	PrivateMessage_PRIVATE_FETCH          PrivateMessage_Type = 4
	PrivateMessage_PRIVATE_FETCH_RESPONSE PrivateMessage_Type = 5
)

var PrivateMessage_Type_name = map[int32]string{
	0: "PRIVATE_SYNC",
	1: "PRIVATE_SYNC_RESPONSE",
	2: "PRIVATE_QUERY",
	3: "PRIVATE_QUERY_RESPONSE",
	4: "PRIVATE_FETCH",
	5: "PRIVATE_FETCH_RESPONSE",
}

var PrivateMessage_Type_value = map[string]int32{
	"PRIVATE_SYNC":           0,
	"PRIVATE_SYNC_RESPONSE":  1,
	"PRIVATE_QUERY":          2,
	"PRIVATE_QUERY_RESPONSE": 3,
	"PRIVATE_FETCH":          4,
	"PRIVATE_FETCH_RESPONSE": 5,
}

func (x PrivateMessage_Type) String() string {
	return proto.EnumName(PrivateMessage_Type_name, int32(x))
}

func (PrivateMessage_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d2a91b51c7bdc125, []int{0, 0}
}

type PrivateQueryResponse_ErrType int32

const (
	PrivateQueryResponse_NORMAL                 PrivateQueryResponse_ErrType = 0
	PrivateQueryResponse_NOTFOUND               PrivateQueryResponse_ErrType = 1
	PrivateQueryResponse_OUTOFBALANCE           PrivateQueryResponse_ErrType = 2
	PrivateQueryResponse_SIGFAILED              PrivateQueryResponse_ErrType = 3
	PrivateQueryResponse_INVOKE_CONTRACT_FAILED PrivateQueryResponse_ErrType = 4
	PrivateQueryResponse_DEPLOY_CONTRACT_FAILED PrivateQueryResponse_ErrType = 5
	PrivateQueryResponse_INVALID_PERMISSION     PrivateQueryResponse_ErrType = 6
	PrivateQueryResponse_UNKNOWN                PrivateQueryResponse_ErrType = 7
)

var PrivateQueryResponse_ErrType_name = map[int32]string{
	0: "NORMAL",
	1: "NOTFOUND",
	2: "OUTOFBALANCE",
	3: "SIGFAILED",
	4: "INVOKE_CONTRACT_FAILED",
	5: "DEPLOY_CONTRACT_FAILED",
	6: "INVALID_PERMISSION",
	7: "UNKNOWN",
}

var PrivateQueryResponse_ErrType_value = map[string]int32{
	"NORMAL":                 0,
	"NOTFOUND":               1,
	"OUTOFBALANCE":           2,
	"SIGFAILED":              3,
	"INVOKE_CONTRACT_FAILED": 4,
	"DEPLOY_CONTRACT_FAILED": 5,
	"INVALID_PERMISSION":     6,
	"UNKNOWN":                7,
}

func (x PrivateQueryResponse_ErrType) String() string {
	return proto.EnumName(PrivateQueryResponse_ErrType_name, int32(x))
}

func (PrivateQueryResponse_ErrType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d2a91b51c7bdc125, []int{4, 0}
}

type PrivateMessage struct {
	Type    PrivateMessage_Type `protobuf:"varint,1,opt,name=type,proto3,enum=protos.PrivateMessage_Type" json:"type,omitempty"`
	Payload []byte              `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *PrivateMessage) Reset()         { *m = PrivateMessage{} }
func (m *PrivateMessage) String() string { return proto.CompactTextString(m) }
func (*PrivateMessage) ProtoMessage()    {}
func (*PrivateMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2a91b51c7bdc125, []int{0}
}
func (m *PrivateMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateMessage.Merge(m, src)
}
func (m *PrivateMessage) XXX_Size() int {
	return m.Size()
}
func (m *PrivateMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateMessage proto.InternalMessageInfo

func (m *PrivateMessage) GetType() PrivateMessage_Type {
	if m != nil {
		return m.Type
	}
	return PrivateMessage_PRIVATE_SYNC
}

func (m *PrivateMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type PrivateSync struct {
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *PrivateSync) Reset()         { *m = PrivateSync{} }
func (m *PrivateSync) String() string { return proto.CompactTextString(m) }
func (*PrivateSync) ProtoMessage()    {}
func (*PrivateSync) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2a91b51c7bdc125, []int{1}
}
func (m *PrivateSync) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateSync) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateSync.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateSync) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateSync.Merge(m, src)
}
func (m *PrivateSync) XXX_Size() int {
	return m.Size()
}
func (m *PrivateSync) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateSync.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateSync proto.InternalMessageInfo

func (m *PrivateSync) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *PrivateSync) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PrivateSyncResponse struct {
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *PrivateSyncResponse) Reset()         { *m = PrivateSyncResponse{} }
func (m *PrivateSyncResponse) String() string { return proto.CompactTextString(m) }
func (*PrivateSyncResponse) ProtoMessage()    {}
func (*PrivateSyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2a91b51c7bdc125, []int{2}
}
func (m *PrivateSyncResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateSyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateSyncResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateSyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateSyncResponse.Merge(m, src)
}
func (m *PrivateSyncResponse) XXX_Size() int {
	return m.Size()
}
func (m *PrivateSyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateSyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateSyncResponse proto.InternalMessageInfo

func (m *PrivateSyncResponse) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *PrivateSyncResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type PrivateQuery struct {
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *PrivateQuery) Reset()         { *m = PrivateQuery{} }
func (m *PrivateQuery) String() string { return proto.CompactTextString(m) }
func (*PrivateQuery) ProtoMessage()    {}
func (*PrivateQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2a91b51c7bdc125, []int{3}
}
func (m *PrivateQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateQuery.Merge(m, src)
}
func (m *PrivateQuery) XXX_Size() int {
	return m.Size()
}
func (m *PrivateQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateQuery.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateQuery proto.InternalMessageInfo

func (m *PrivateQuery) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *PrivateQuery) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type PrivateQueryResponse struct {
	From    string                       `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Hash    string                       `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Type    PrivateQueryResponse_ErrType `protobuf:"varint,3,opt,name=type,proto3,enum=protos.PrivateQueryResponse_ErrType" json:"type,omitempty"`
	Receipt []byte                       `protobuf:"bytes,4,opt,name=receipt,proto3" json:"receipt,omitempty"`
}

func (m *PrivateQueryResponse) Reset()         { *m = PrivateQueryResponse{} }
func (m *PrivateQueryResponse) String() string { return proto.CompactTextString(m) }
func (*PrivateQueryResponse) ProtoMessage()    {}
func (*PrivateQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2a91b51c7bdc125, []int{4}
}
func (m *PrivateQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateQueryResponse.Merge(m, src)
}
func (m *PrivateQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *PrivateQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateQueryResponse proto.InternalMessageInfo

func (m *PrivateQueryResponse) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *PrivateQueryResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *PrivateQueryResponse) GetType() PrivateQueryResponse_ErrType {
	if m != nil {
		return m.Type
	}
	return PrivateQueryResponse_NORMAL
}

func (m *PrivateQueryResponse) GetReceipt() []byte {
	if m != nil {
		return m.Receipt
	}
	return nil
}

type PrivateFetch struct {
	From       string   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	TxHashList []string `protobuf:"bytes,2,rep,name=txHashList,proto3" json:"txHashList,omitempty"`
	Force      bool     `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
}

func (m *PrivateFetch) Reset()         { *m = PrivateFetch{} }
func (m *PrivateFetch) String() string { return proto.CompactTextString(m) }
func (*PrivateFetch) ProtoMessage()    {}
func (*PrivateFetch) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2a91b51c7bdc125, []int{5}
}
func (m *PrivateFetch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateFetch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateFetch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateFetch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateFetch.Merge(m, src)
}
func (m *PrivateFetch) XXX_Size() int {
	return m.Size()
}
func (m *PrivateFetch) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateFetch.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateFetch proto.InternalMessageInfo

func (m *PrivateFetch) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *PrivateFetch) GetTxHashList() []string {
	if m != nil {
		return m.TxHashList
	}
	return nil
}

func (m *PrivateFetch) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type PrivateFetchResponse struct {
	From   string         `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	TxList []*Transaction `protobuf:"bytes,2,rep,name=txList,proto3" json:"txList,omitempty"`
	Force  bool           `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
}

func (m *PrivateFetchResponse) Reset()         { *m = PrivateFetchResponse{} }
func (m *PrivateFetchResponse) String() string { return proto.CompactTextString(m) }
func (*PrivateFetchResponse) ProtoMessage()    {}
func (*PrivateFetchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2a91b51c7bdc125, []int{6}
}
func (m *PrivateFetchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateFetchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateFetchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateFetchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateFetchResponse.Merge(m, src)
}
func (m *PrivateFetchResponse) XXX_Size() int {
	return m.Size()
}
func (m *PrivateFetchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateFetchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateFetchResponse proto.InternalMessageInfo

func (m *PrivateFetchResponse) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *PrivateFetchResponse) GetTxList() []*Transaction {
	if m != nil {
		return m.TxList
	}
	return nil
}

func (m *PrivateFetchResponse) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func init() {
	proto.RegisterEnum("protos.PrivateMessage_Type", PrivateMessage_Type_name, PrivateMessage_Type_value)
	proto.RegisterEnum("protos.PrivateQueryResponse_ErrType", PrivateQueryResponse_ErrType_name, PrivateQueryResponse_ErrType_value)
	proto.RegisterType((*PrivateMessage)(nil), "protos.private_message")
	proto.RegisterType((*PrivateSync)(nil), "protos.private_sync")
	proto.RegisterType((*PrivateSyncResponse)(nil), "protos.private_sync_response")
	proto.RegisterType((*PrivateQuery)(nil), "protos.private_query")
	proto.RegisterType((*PrivateQueryResponse)(nil), "protos.private_query_response")
	proto.RegisterType((*PrivateFetch)(nil), "protos.private_fetch")
	proto.RegisterType((*PrivateFetchResponse)(nil), "protos.private_fetch_response")
}

func init() { proto.RegisterFile("private.proto", fileDescriptor_d2a91b51c7bdc125) }

var fileDescriptor_d2a91b51c7bdc125 = []byte{
	// 587 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xc7, 0xe3, 0x24, 0x4d, 0x9a, 0x69, 0xfa, 0x7d, 0x66, 0xa1, 0x55, 0xa8, 0x90, 0x55, 0xf9,
	0x80, 0x2a, 0xa1, 0x26, 0x55, 0x91, 0x40, 0xe2, 0x82, 0xdc, 0xc4, 0xa1, 0xa6, 0xe9, 0x3a, 0xac,
	0x9d, 0xa2, 0x70, 0xb1, 0x5c, 0x77, 0x5b, 0x5b, 0x22, 0x5e, 0xe3, 0xdd, 0xa2, 0xfa, 0x2d, 0xe0,
	0x11, 0x78, 0x0d, 0x9e, 0x80, 0x63, 0x8f, 0x1c, 0x51, 0xf3, 0x04, 0xbc, 0x01, 0x8a, 0xed, 0x34,
	0x49, 0x29, 0x88, 0x9e, 0xbc, 0x33, 0xf3, 0x9f, 0xff, 0x6a, 0xe6, 0x27, 0x2f, 0xac, 0x46, 0x71,
	0xf0, 0xd1, 0x15, 0xb4, 0x19, 0xc5, 0x4c, 0x30, 0x54, 0x49, 0x3f, 0x7c, 0x63, 0xef, 0x2c, 0x10,
	0xfe, 0xf9, 0x71, 0xd3, 0x63, 0xa3, 0x96, 0x9f, 0x44, 0x34, 0xf6, 0x7c, 0x37, 0x08, 0x5b, 0x67,
	0x6c, 0xdb, 0x8f, 0xbc, 0x6d, 0x8f, 0x8d, 0x46, 0x2c, 0x6c, 0x89, 0x24, 0xa2, 0xbc, 0x95, 0x75,
	0xb4, 0x44, 0xec, 0x86, 0xdc, 0xf5, 0x44, 0xc0, 0xc2, 0xcc, 0x4b, 0xfd, 0x29, 0xc1, 0xff, 0xb9,
	0xbb, 0x33, 0xa2, 0x9c, 0xbb, 0x67, 0x14, 0xed, 0x40, 0x79, 0xd2, 0xd5, 0x90, 0x36, 0xa5, 0xad,
	0xff, 0x76, 0x1f, 0x65, 0x4a, 0xde, 0xbc, 0x21, 0x6b, 0xda, 0x49, 0x44, 0x49, 0xaa, 0x44, 0x0d,
	0xa8, 0x46, 0x6e, 0xf2, 0x9e, 0xb9, 0x27, 0x8d, 0xe2, 0xa6, 0xb4, 0x55, 0x27, 0xd3, 0x50, 0xfd,
	0x2c, 0x41, 0x79, 0x22, 0x44, 0x32, 0xd4, 0xfb, 0xc4, 0x38, 0xd2, 0x6c, 0xdd, 0xb1, 0x86, 0xb8,
	0x2d, 0x17, 0xd0, 0x43, 0x58, 0x9b, 0xcf, 0x38, 0x44, 0xb7, 0xfa, 0x26, 0xb6, 0x74, 0x59, 0x42,
	0xf7, 0x60, 0x75, 0x5a, 0x7a, 0x33, 0xd0, 0xc9, 0x50, 0x2e, 0xa2, 0x0d, 0x58, 0x5f, 0x48, 0xcd,
	0xe4, 0xa5, 0x79, 0x79, 0x57, 0xb7, 0xdb, 0xfb, 0x72, 0x79, 0x5e, 0x9e, 0xa6, 0x66, 0xf2, 0x25,
	0xf5, 0x19, 0xd4, 0xa7, 0xb3, 0xf0, 0x24, 0xf4, 0x10, 0x82, 0xf2, 0x69, 0xcc, 0x46, 0xe9, 0xbc,
	0x35, 0x92, 0x9e, 0x27, 0xb9, 0x13, 0x57, 0xb8, 0xf9, 0x38, 0xe9, 0x59, 0x7d, 0x09, 0x6b, 0xf3,
	0x7d, 0x4e, 0x4c, 0x79, 0xc4, 0x42, 0x4e, 0xff, 0x64, 0xe0, 0xbb, 0xdc, 0x4f, 0x0d, 0x6a, 0x24,
	0x3d, 0xab, 0xcf, 0xaf, 0x49, 0x3a, 0x1f, 0xce, 0x69, 0x9c, 0xfc, 0x73, 0xe3, 0xd7, 0x22, 0xac,
	0x2f, 0x74, 0xde, 0xf9, 0x6e, 0xf4, 0x22, 0x87, 0x5a, 0x4a, 0xa1, 0x3e, 0xbe, 0x09, 0x75, 0xd1,
	0xb5, 0xa9, 0xc7, 0xf1, 0x22, 0xde, 0x98, 0x7a, 0x34, 0x88, 0x44, 0xa3, 0x9c, 0xe1, 0xcd, 0x43,
	0xf5, 0x8b, 0x04, 0xd5, 0x5c, 0x8b, 0x00, 0x2a, 0xd8, 0x24, 0x87, 0x5a, 0x4f, 0x2e, 0xa0, 0x3a,
	0x2c, 0x63, 0xd3, 0xee, 0x9a, 0x03, 0xdc, 0x91, 0xa5, 0x09, 0x7b, 0x73, 0x60, 0x9b, 0xdd, 0x3d,
	0xad, 0xa7, 0xe1, 0xb6, 0x2e, 0x17, 0xd1, 0x2a, 0xd4, 0x2c, 0xe3, 0x55, 0x57, 0x33, 0x7a, 0x7a,
	0x47, 0x2e, 0x4d, 0x68, 0x19, 0xf8, 0xc8, 0x3c, 0xd0, 0x9d, 0xb6, 0x89, 0x6d, 0xa2, 0xb5, 0x6d,
	0x27, 0xaf, 0xa5, 0x24, 0x3b, 0x7a, 0xbf, 0x67, 0x0e, 0x7f, 0xab, 0x2d, 0xa1, 0x75, 0x40, 0x06,
	0x3e, 0xd2, 0x7a, 0x46, 0xc7, 0xe9, 0xeb, 0xe4, 0xd0, 0xb0, 0x2c, 0xc3, 0xc4, 0x72, 0x05, 0xad,
	0x40, 0x75, 0x80, 0x0f, 0xb0, 0xf9, 0x16, 0xcb, 0x55, 0x75, 0x38, 0xdb, 0xfa, 0x29, 0x15, 0x9e,
	0x7f, 0xeb, 0xca, 0x14, 0x00, 0x71, 0xb1, 0xef, 0x72, 0xbf, 0x17, 0x70, 0xd1, 0x28, 0x6e, 0x96,
	0xb6, 0x6a, 0x64, 0x2e, 0x83, 0x1e, 0xc0, 0xd2, 0x29, 0x8b, 0xbd, 0x6c, 0x7f, 0xcb, 0x24, 0x0b,
	0x54, 0x36, 0xc3, 0x92, 0x5a, 0xff, 0x1d, 0xcb, 0x13, 0xa8, 0x88, 0x8b, 0x6b, 0xff, 0x95, 0xdd,
	0xfb, 0x53, 0x08, 0xf6, 0xec, 0xb7, 0x24, 0xb9, 0xe4, 0xf6, 0x0b, 0xf7, 0x5e, 0x7f, 0xbb, 0x52,
	0xa4, 0xcb, 0x2b, 0x45, 0xfa, 0x71, 0xa5, 0x48, 0x9f, 0xc6, 0x4a, 0xe1, 0x72, 0xac, 0x14, 0xbe,
	0x8f, 0x95, 0xc2, 0xbb, 0x9d, 0xbb, 0x3e, 0x06, 0xc7, 0xd9, 0x33, 0xf2, 0xf4, 0x57, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xc2, 0xb9, 0xd6, 0x0c, 0x5e, 0x04, 0x00, 0x00,
}

func (m *PrivateMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintPrivate(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PrivateSync) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateSync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateSync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateSyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateSyncResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateSyncResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Receipt) > 0 {
		i -= len(m.Receipt)
		copy(dAtA[i:], m.Receipt)
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.Receipt)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintPrivate(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateFetch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateFetch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateFetch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.TxHashList) > 0 {
		for iNdEx := len(m.TxHashList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxHashList[iNdEx])
			copy(dAtA[i:], m.TxHashList[iNdEx])
			i = encodeVarintPrivate(dAtA, i, uint64(len(m.TxHashList[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateFetchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateFetchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateFetchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.TxList) > 0 {
		for iNdEx := len(m.TxList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPrivate(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPrivate(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrivate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PrivateMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPrivate(uint64(m.Type))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	return n
}

func (m *PrivateSync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	return n
}

func (m *PrivateSyncResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	return n
}

func (m *PrivateQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	return n
}

func (m *PrivateQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovPrivate(uint64(m.Type))
	}
	l = len(m.Receipt)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	return n
}

func (m *PrivateFetch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	if len(m.TxHashList) > 0 {
		for _, s := range m.TxHashList {
			l = len(s)
			n += 1 + l + sovPrivate(uint64(l))
		}
	}
	if m.Force {
		n += 2
	}
	return n
}

func (m *PrivateFetchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	if len(m.TxList) > 0 {
		for _, e := range m.TxList {
			l = e.Size()
			n += 1 + l + sovPrivate(uint64(l))
		}
	}
	if m.Force {
		n += 2
	}
	return n
}

func sovPrivate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrivate(x uint64) (n int) {
	return sovPrivate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrivateMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: private_message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: private_message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PrivateMessage_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateSync) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: private_sync: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: private_sync: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateSyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: private_sync_response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: private_sync_response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: private_query: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: private_query: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: private_query_response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: private_query_response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PrivateQueryResponse_ErrType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receipt = append(m.Receipt[:0], dAtA[iNdEx:postIndex]...)
			if m.Receipt == nil {
				m.Receipt = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateFetch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: private_fetch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: private_fetch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHashList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHashList = append(m.TxHashList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateFetchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: private_fetch_response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: private_fetch_response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxList = append(m.TxList, &Transaction{})
			if err := m.TxList[len(m.TxList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrivate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrivate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrivate
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPrivate
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPrivate
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPrivate(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPrivate
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPrivate = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrivate   = fmt.Errorf("proto: integer overflow")
)
