// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: block.proto

package protos

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Block struct {
	Version        []byte                      `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	ParentHash     []byte                      `protobuf:"bytes,2,opt,name=parentHash,proto3" json:"parentHash,omitempty"`
	BlockHash      []byte                      `protobuf:"bytes,3,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	Transactions   []*Transaction              `protobuf:"bytes,4,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Timestamp      int64                       `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	MerkleRoot     []byte                      `protobuf:"bytes,6,opt,name=merkleRoot,proto3" json:"merkleRoot,omitempty"`
	TxRoot         []byte                      `protobuf:"bytes,7,opt,name=txRoot,proto3" json:"txRoot,omitempty"`
	ReceiptRoot    []byte                      `protobuf:"bytes,8,opt,name=receiptRoot,proto3" json:"receiptRoot,omitempty"`
	Number         uint64                      `protobuf:"varint,9,opt,name=number,proto3" json:"number,omitempty"`
	WriteTime      int64                       `protobuf:"varint,10,opt,name=writeTime,proto3" json:"writeTime,omitempty"`
	CommitTime     int64                       `protobuf:"varint,11,opt,name=commitTime,proto3" json:"commitTime,omitempty"`
	EvmTime        int64                       `protobuf:"varint,12,opt,name=evmTime,proto3" json:"evmTime,omitempty"`
	Bloom          []byte                      `protobuf:"bytes,13,opt,name=bloom,proto3" json:"bloom,omitempty"`
	InvalidRecords []*InvalidTransactionRecord `protobuf:"bytes,14,rep,name=invalidRecords,proto3" json:"invalidRecords,omitempty"`
	InvalidRoot    []byte                      `protobuf:"bytes,15,opt,name=invalidRoot,proto3" json:"invalidRoot,omitempty"`
	QuorumCert     *QuorumCert                 `protobuf:"bytes,16,opt,name=quorumCert,proto3" json:"quorumCert,omitempty"`
	Author         string                      `protobuf:"bytes,17,opt,name=Author,proto3" json:"Author,omitempty"`
	Signature      []byte                      `protobuf:"bytes,18,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{0}
}
func (m *Block) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Block.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return m.Size()
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetVersion() []byte {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *Block) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *Block) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *Block) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Block) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

func (m *Block) GetTxRoot() []byte {
	if m != nil {
		return m.TxRoot
	}
	return nil
}

func (m *Block) GetReceiptRoot() []byte {
	if m != nil {
		return m.ReceiptRoot
	}
	return nil
}

func (m *Block) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Block) GetWriteTime() int64 {
	if m != nil {
		return m.WriteTime
	}
	return 0
}

func (m *Block) GetCommitTime() int64 {
	if m != nil {
		return m.CommitTime
	}
	return 0
}

func (m *Block) GetEvmTime() int64 {
	if m != nil {
		return m.EvmTime
	}
	return 0
}

func (m *Block) GetBloom() []byte {
	if m != nil {
		return m.Bloom
	}
	return nil
}

func (m *Block) GetInvalidRecords() []*InvalidTransactionRecord {
	if m != nil {
		return m.InvalidRecords
	}
	return nil
}

func (m *Block) GetInvalidRoot() []byte {
	if m != nil {
		return m.InvalidRoot
	}
	return nil
}

func (m *Block) GetQuorumCert() *QuorumCert {
	if m != nil {
		return m.QuorumCert
	}
	return nil
}

func (m *Block) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Block) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Blocks struct {
	Batch []*Block `protobuf:"bytes,1,rep,name=batch,proto3" json:"batch,omitempty"`
}

func (m *Blocks) Reset()         { *m = Blocks{} }
func (m *Blocks) String() string { return proto.CompactTextString(m) }
func (*Blocks) ProtoMessage()    {}
func (*Blocks) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{1}
}
func (m *Blocks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Blocks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Blocks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Blocks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Blocks.Merge(m, src)
}
func (m *Blocks) XXX_Size() int {
	return m.Size()
}
func (m *Blocks) XXX_DiscardUnknown() {
	xxx_messageInfo_Blocks.DiscardUnknown(m)
}

var xxx_messageInfo_Blocks proto.InternalMessageInfo

func (m *Blocks) GetBatch() []*Block {
	if m != nil {
		return m.Batch
	}
	return nil
}

type BlockWrapper struct {
	BlockVersion []byte `protobuf:"bytes,1,opt,name=blockVersion,proto3" json:"blockVersion,omitempty"`
	Block        []byte `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *BlockWrapper) Reset()         { *m = BlockWrapper{} }
func (m *BlockWrapper) String() string { return proto.CompactTextString(m) }
func (*BlockWrapper) ProtoMessage()    {}
func (*BlockWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{2}
}
func (m *BlockWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockWrapper.Merge(m, src)
}
func (m *BlockWrapper) XXX_Size() int {
	return m.Size()
}
func (m *BlockWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_BlockWrapper proto.InternalMessageInfo

func (m *BlockWrapper) GetBlockVersion() []byte {
	if m != nil {
		return m.BlockVersion
	}
	return nil
}

func (m *BlockWrapper) GetBlock() []byte {
	if m != nil {
		return m.Block
	}
	return nil
}

func init() {
	proto.RegisterType((*Block)(nil), "protos.Block")
	proto.RegisterType((*Blocks)(nil), "protos.Blocks")
	proto.RegisterType((*BlockWrapper)(nil), "protos.BlockWrapper")
}

func init() { proto.RegisterFile("block.proto", fileDescriptor_8e550b1f5926e92d) }

var fileDescriptor_8e550b1f5926e92d = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x3f, 0x8f, 0xd3, 0x30,
	0x18, 0xc6, 0x1b, 0xfa, 0xe7, 0xa8, 0xdb, 0x3b, 0xc0, 0x20, 0x64, 0x9d, 0x50, 0x14, 0x95, 0x25,
	0x4b, 0x5b, 0x54, 0x06, 0x56, 0x28, 0x4b, 0x61, 0x23, 0x9c, 0x40, 0x62, 0x73, 0x7c, 0x56, 0x63,
	0xb5, 0xb6, 0x83, 0xed, 0x14, 0xee, 0x5b, 0xf0, 0xb1, 0x18, 0x6f, 0x64, 0x44, 0xed, 0xca, 0x87,
	0x40, 0x7e, 0xdd, 0xb4, 0xe9, 0x6d, 0x37, 0x45, 0xef, 0xf3, 0xb3, 0x5f, 0x3f, 0xef, 0xa3, 0x37,
	0x68, 0x90, 0xaf, 0x35, 0x5b, 0x4d, 0x4a, 0xa3, 0x9d, 0xc6, 0x3d, 0xf8, 0xd8, 0xcb, 0xf9, 0x52,
	0xb8, 0xa2, 0xca, 0x27, 0x4c, 0xcb, 0x69, 0x71, 0x53, 0x72, 0xc3, 0x0a, 0x2a, 0xd4, 0x74, 0xa9,
	0xc7, 0x45, 0xc9, 0xc6, 0x4c, 0x4b, 0xa9, 0xd5, 0xd4, 0xdd, 0x94, 0xdc, 0x4e, 0xc3, 0x8d, 0xa9,
	0x33, 0x54, 0x59, 0xca, 0x9c, 0xd0, 0x2a, 0xf4, 0xba, 0x7c, 0x7b, 0xef, 0x1e, 0x4c, 0x2b, 0xcb,
	0x95, 0xad, 0x6c, 0xe8, 0x30, 0xfa, 0xd7, 0x41, 0xdd, 0xb9, 0x77, 0x87, 0x09, 0x3a, 0xdb, 0x70,
	0x63, 0x85, 0x56, 0x24, 0x4a, 0xa2, 0x74, 0x98, 0xd5, 0x25, 0x8e, 0x11, 0x2a, 0xa9, 0xe1, 0xca,
	0x2d, 0xa8, 0x2d, 0xc8, 0x03, 0x80, 0x0d, 0x05, 0xbf, 0x40, 0x7d, 0x18, 0x10, 0x70, 0x1b, 0xf0,
	0x51, 0xc0, 0x6f, 0xd0, 0xb0, 0x61, 0xdc, 0x92, 0x4e, 0xd2, 0x4e, 0x07, 0xb3, 0xa7, 0xe1, 0x7d,
	0x3b, 0xb9, 0x3a, 0xb2, 0xec, 0xe4, 0xa0, 0x6f, 0xeb, 0x84, 0xe4, 0xd6, 0x51, 0x59, 0x92, 0x6e,
	0x12, 0xa5, 0xed, 0xec, 0x28, 0x78, 0x53, 0x92, 0x9b, 0xd5, 0x9a, 0x67, 0x5a, 0x3b, 0xd2, 0x0b,
	0xa6, 0x8e, 0x0a, 0x7e, 0x8e, 0x7a, 0xee, 0x27, 0xb0, 0x33, 0x60, 0xfb, 0x0a, 0x27, 0x68, 0x60,
	0x38, 0xe3, 0xa2, 0x74, 0x00, 0x1f, 0x02, 0x6c, 0x4a, 0xfe, 0xa6, 0xaa, 0x64, 0xce, 0x0d, 0xe9,
	0x27, 0x51, 0xda, 0xc9, 0xf6, 0x95, 0xf7, 0xf3, 0xc3, 0x08, 0xc7, 0xaf, 0x84, 0xe4, 0x04, 0x05,
	0x3f, 0x07, 0xc1, 0xfb, 0xf1, 0x79, 0x0b, 0x07, 0x78, 0x00, 0xb8, 0xa1, 0xf8, 0x78, 0xf9, 0x46,
	0x02, 0x1c, 0x02, 0xac, 0x4b, 0xfc, 0x0c, 0x75, 0xf3, 0xb5, 0xd6, 0x92, 0x9c, 0x83, 0x97, 0x50,
	0xe0, 0x05, 0xba, 0x10, 0x6a, 0x43, 0xd7, 0xe2, 0x3a, 0xe3, 0x4c, 0x9b, 0x6b, 0x4b, 0x2e, 0x20,
	0xb8, 0xa4, 0x0e, 0xee, 0x43, 0xa0, 0xcd, 0xfc, 0xe0, 0x60, 0x76, 0xe7, 0x9e, 0x9f, 0xb8, 0x56,
	0xfc, 0xc4, 0x8f, 0xc2, 0xc4, 0x0d, 0x09, 0xcf, 0x10, 0xfa, 0x5e, 0x69, 0x53, 0xc9, 0xf7, 0xdc,
	0x38, 0xf2, 0x38, 0x89, 0xd2, 0xc1, 0x0c, 0xd7, 0xef, 0x7c, 0x3a, 0x90, 0xac, 0x71, 0xca, 0xa7,
	0xf4, 0xae, 0x72, 0x85, 0x36, 0xe4, 0x49, 0x12, 0xa5, 0xfd, 0x6c, 0x5f, 0xf9, 0x94, 0x3e, 0x8b,
	0xa5, 0xa2, 0xae, 0x32, 0x9c, 0xe0, 0xb0, 0x0c, 0x07, 0x61, 0x34, 0x46, 0x3d, 0xd8, 0x36, 0x8b,
	0x5f, 0xa2, 0x6e, 0x4e, 0x1d, 0x2b, 0x48, 0x04, 0x63, 0x9d, 0xd7, 0xcf, 0x01, 0xce, 0x02, 0x1b,
	0x2d, 0xd0, 0x10, 0xea, 0xaf, 0x86, 0x96, 0x25, 0x37, 0x78, 0x84, 0x86, 0xb0, 0x58, 0x5f, 0x4e,
	0x16, 0xf5, 0x44, 0xdb, 0xc7, 0xc9, 0x56, 0xfb, 0x45, 0x0d, 0xc5, 0xfc, 0xe3, 0xef, 0x6d, 0x1c,
	0xdd, 0x6e, 0xe3, 0xe8, 0xef, 0x36, 0x8e, 0x7e, 0xed, 0xe2, 0xd6, 0xed, 0x2e, 0x6e, 0xfd, 0xd9,
	0xc5, 0xad, 0x6f, 0xaf, 0xee, 0xfb, 0x0f, 0xe5, 0xe1, 0x0f, 0x7e, 0xfd, 0x3f, 0x00, 0x00, 0xff,
	0xff, 0x92, 0x0e, 0x73, 0xb0, 0xd7, 0x03, 0x00, 0x00,
}

func (m *Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Block) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Block) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.QuorumCert != nil {
		{
			size, err := m.QuorumCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.InvalidRoot) > 0 {
		i -= len(m.InvalidRoot)
		copy(dAtA[i:], m.InvalidRoot)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.InvalidRoot)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.InvalidRecords) > 0 {
		for iNdEx := len(m.InvalidRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InvalidRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.Bloom) > 0 {
		i -= len(m.Bloom)
		copy(dAtA[i:], m.Bloom)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Bloom)))
		i--
		dAtA[i] = 0x6a
	}
	if m.EvmTime != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.EvmTime))
		i--
		dAtA[i] = 0x60
	}
	if m.CommitTime != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.CommitTime))
		i--
		dAtA[i] = 0x58
	}
	if m.WriteTime != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.WriteTime))
		i--
		dAtA[i] = 0x50
	}
	if m.Number != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ReceiptRoot) > 0 {
		i -= len(m.ReceiptRoot)
		copy(dAtA[i:], m.ReceiptRoot)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ReceiptRoot)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TxRoot) > 0 {
		i -= len(m.TxRoot)
		copy(dAtA[i:], m.TxRoot)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.TxRoot)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MerkleRoot) > 0 {
		i -= len(m.MerkleRoot)
		copy(dAtA[i:], m.MerkleRoot)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.MerkleRoot)))
		i--
		dAtA[i] = 0x32
	}
	if m.Timestamp != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentHash) > 0 {
		i -= len(m.ParentHash)
		copy(dAtA[i:], m.ParentHash)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ParentHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Blocks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Blocks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Blocks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Batch) > 0 {
		for iNdEx := len(m.Batch) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Batch[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlockWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Block) > 0 {
		i -= len(m.Block)
		copy(dAtA[i:], m.Block)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Block)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlockVersion) > 0 {
		i -= len(m.BlockVersion)
		copy(dAtA[i:], m.BlockVersion)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.BlockVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBlock(dAtA []byte, offset int, v uint64) int {
	offset -= sovBlock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.ParentHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if m.Timestamp != 0 {
		n += 1 + sovBlock(uint64(m.Timestamp))
	}
	l = len(m.MerkleRoot)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.TxRoot)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.ReceiptRoot)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Number != 0 {
		n += 1 + sovBlock(uint64(m.Number))
	}
	if m.WriteTime != 0 {
		n += 1 + sovBlock(uint64(m.WriteTime))
	}
	if m.CommitTime != 0 {
		n += 1 + sovBlock(uint64(m.CommitTime))
	}
	if m.EvmTime != 0 {
		n += 1 + sovBlock(uint64(m.EvmTime))
	}
	l = len(m.Bloom)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if len(m.InvalidRecords) > 0 {
		for _, e := range m.InvalidRecords {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	l = len(m.InvalidRoot)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.QuorumCert != nil {
		l = m.QuorumCert.Size()
		n += 2 + l + sovBlock(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 2 + l + sovBlock(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 2 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *Blocks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Batch) > 0 {
		for _, e := range m.Batch {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	return n
}

func (m *BlockWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockVersion)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.Block)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func sovBlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBlock(x uint64) (n int) {
	return sovBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = append(m.Version[:0], dAtA[iNdEx:postIndex]...)
			if m.Version == nil {
				m.Version = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentHash = append(m.ParentHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentHash == nil {
				m.ParentHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &Transaction{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleRoot = append(m.MerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.MerkleRoot == nil {
				m.MerkleRoot = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxRoot = append(m.TxRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.TxRoot == nil {
				m.TxRoot = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptRoot = append(m.ReceiptRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ReceiptRoot == nil {
				m.ReceiptRoot = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteTime", wireType)
			}
			m.WriteTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WriteTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTime", wireType)
			}
			m.CommitTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmTime", wireType)
			}
			m.EvmTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EvmTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bloom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bloom = append(m.Bloom[:0], dAtA[iNdEx:postIndex]...)
			if m.Bloom == nil {
				m.Bloom = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvalidRecords = append(m.InvalidRecords, &InvalidTransactionRecord{})
			if err := m.InvalidRecords[len(m.InvalidRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvalidRoot = append(m.InvalidRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.InvalidRoot == nil {
				m.InvalidRoot = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuorumCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QuorumCert == nil {
				m.QuorumCert = &QuorumCert{}
			}
			if err := m.QuorumCert.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Blocks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Blocks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Blocks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Batch = append(m.Batch, &Block{})
			if err := m.Batch[len(m.Batch)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockVersion", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockVersion = append(m.BlockVersion[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockVersion == nil {
				m.BlockVersion = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Block = append(m.Block[:0], dAtA[iNdEx:postIndex]...)
			if m.Block == nil {
				m.Block = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBlock
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthBlock
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBlock
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBlock(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthBlock
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBlock = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlock   = fmt.Errorf("proto: integer overflow")
)
