// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cross_chain.proto

package protos

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AnchorContractResult_Op int32

const (
	AnchorContractResult_REGISTER   AnchorContractResult_Op = 0
	AnchorContractResult_UNREGISTER AnchorContractResult_Op = 1
	AnchorContractResult_REPLACE    AnchorContractResult_Op = 2
)

var AnchorContractResult_Op_name = map[int32]string{
	0: "REGISTER",
	1: "UNREGISTER",
	2: "REPLACE",
}

var AnchorContractResult_Op_value = map[string]int32{
	"REGISTER":   0,
	"UNREGISTER": 1,
	"REPLACE":    2,
}

func (x AnchorContractResult_Op) String() string {
	return proto.EnumName(AnchorContractResult_Op_name, int32(x))
}

func (AnchorContractResult_Op) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2a70e5bee36203e7, []int{3, 0}
}

type TxToSend_TxToSendStatus int32

const (
	TxToSend_TOSEND TxToSend_TxToSendStatus = 0
	TxToSend_SENT   TxToSend_TxToSendStatus = 1
)

var TxToSend_TxToSendStatus_name = map[int32]string{
	0: "TOSEND",
	1: "SENT",
}

var TxToSend_TxToSendStatus_value = map[string]int32{
	"TOSEND": 0,
	"SENT":   1,
}

func (x TxToSend_TxToSendStatus) String() string {
	return proto.EnumName(TxToSend_TxToSendStatus_name, int32(x))
}

func (TxToSend_TxToSendStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2a70e5bee36203e7, []int{10, 0}
}

type TimeoutStatus_ConfirmStatus int32

const (
	TimeoutStatus_IRRELAVENT  TimeoutStatus_ConfirmStatus = 0
	TimeoutStatus_UNCONFIRMED TimeoutStatus_ConfirmStatus = 1
	TimeoutStatus_CONFIRMED   TimeoutStatus_ConfirmStatus = 2
)

var TimeoutStatus_ConfirmStatus_name = map[int32]string{
	0: "IRRELAVENT",
	1: "UNCONFIRMED",
	2: "CONFIRMED",
}

var TimeoutStatus_ConfirmStatus_value = map[string]int32{
	"IRRELAVENT":  0,
	"UNCONFIRMED": 1,
	"CONFIRMED":   2,
}

func (x TimeoutStatus_ConfirmStatus) String() string {
	return proto.EnumName(TimeoutStatus_ConfirmStatus_name, int32(x))
}

func (TimeoutStatus_ConfirmStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2a70e5bee36203e7, []int{13, 0}
}

type TimeoutStatus_ResultStatus int32

const (
	TimeoutStatus_NONVALUE TimeoutStatus_ResultStatus = 0
	TimeoutStatus_SUCCESS  TimeoutStatus_ResultStatus = 1
	TimeoutStatus_FAIL     TimeoutStatus_ResultStatus = 2
)

var TimeoutStatus_ResultStatus_name = map[int32]string{
	0: "NONVALUE",
	1: "SUCCESS",
	2: "FAIL",
}

var TimeoutStatus_ResultStatus_value = map[string]int32{
	"NONVALUE": 0,
	"SUCCESS":  1,
	"FAIL":     2,
}

func (x TimeoutStatus_ResultStatus) String() string {
	return proto.EnumName(TimeoutStatus_ResultStatus_name, int32(x))
}

func (TimeoutStatus_ResultStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2a70e5bee36203e7, []int{13, 1}
}

// in receipt result
type CrossChainMeta struct {
	CrossChainID string `protobuf:"bytes,1,opt,name=crossChainID,proto3" json:"crossChainID,omitempty"`
	Stage        int32  `protobuf:"varint,2,opt,name=stage,proto3" json:"stage,omitempty"`
}

func (m *CrossChainMeta) Reset()         { *m = CrossChainMeta{} }
func (m *CrossChainMeta) String() string { return proto.CompactTextString(m) }
func (*CrossChainMeta) ProtoMessage()    {}
func (*CrossChainMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a70e5bee36203e7, []int{0}
}
func (m *CrossChainMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainMeta.Merge(m, src)
}
func (m *CrossChainMeta) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainMeta.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainMeta proto.InternalMessageInfo

func (m *CrossChainMeta) GetCrossChainID() string {
	if m != nil {
		return m.CrossChainID
	}
	return ""
}

func (m *CrossChainMeta) GetStage() int32 {
	if m != nil {
		return m.Stage
	}
	return 0
}

type BusinessCallData struct {
	MethodName  string   `protobuf:"bytes,1,opt,name=methodName,proto3" json:"methodName,omitempty"`
	ParamTypes  []string `protobuf:"bytes,2,rep,name=paramTypes,proto3" json:"paramTypes,omitempty"`
	ParamValues []string `protobuf:"bytes,3,rep,name=paramValues,proto3" json:"paramValues,omitempty"`
}

func (m *BusinessCallData) Reset()         { *m = BusinessCallData{} }
func (m *BusinessCallData) String() string { return proto.CompactTextString(m) }
func (*BusinessCallData) ProtoMessage()    {}
func (*BusinessCallData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a70e5bee36203e7, []int{1}
}
func (m *BusinessCallData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BusinessCallData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BusinessCallData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BusinessCallData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusinessCallData.Merge(m, src)
}
func (m *BusinessCallData) XXX_Size() int {
	return m.Size()
}
func (m *BusinessCallData) XXX_DiscardUnknown() {
	xxx_messageInfo_BusinessCallData.DiscardUnknown(m)
}

var xxx_messageInfo_BusinessCallData proto.InternalMessageInfo

func (m *BusinessCallData) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *BusinessCallData) GetParamTypes() []string {
	if m != nil {
		return m.ParamTypes
	}
	return nil
}

func (m *BusinessCallData) GetParamValues() []string {
	if m != nil {
		return m.ParamValues
	}
	return nil
}

type CrossChainContractResult struct {
	Ret            string            `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Success        bool              `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	TargetNs       string            `protobuf:"bytes,3,opt,name=targetNs,proto3" json:"targetNs,omitempty"`
	TargetContract string            `protobuf:"bytes,4,opt,name=targetContract,proto3" json:"targetContract,omitempty"`
	CallData       *BusinessCallData `protobuf:"bytes,5,opt,name=callData,proto3" json:"callData,omitempty"`
	Rollback       *BusinessCallData `protobuf:"bytes,6,opt,name=rollback,proto3" json:"rollback,omitempty"`
	// contract return value will not contain this field, but follwing logic need this information
	Meta *CrossChainMeta `protobuf:"bytes,7,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (m *CrossChainContractResult) Reset()         { *m = CrossChainContractResult{} }
func (m *CrossChainContractResult) String() string { return proto.CompactTextString(m) }
func (*CrossChainContractResult) ProtoMessage()    {}
func (*CrossChainContractResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a70e5bee36203e7, []int{2}
}
func (m *CrossChainContractResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainContractResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainContractResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainContractResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainContractResult.Merge(m, src)
}
func (m *CrossChainContractResult) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainContractResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainContractResult.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainContractResult proto.InternalMessageInfo

func (m *CrossChainContractResult) GetRet() string {
	if m != nil {
		return m.Ret
	}
	return ""
}

func (m *CrossChainContractResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *CrossChainContractResult) GetTargetNs() string {
	if m != nil {
		return m.TargetNs
	}
	return ""
}

func (m *CrossChainContractResult) GetTargetContract() string {
	if m != nil {
		return m.TargetContract
	}
	return ""
}

func (m *CrossChainContractResult) GetCallData() *BusinessCallData {
	if m != nil {
		return m.CallData
	}
	return nil
}

func (m *CrossChainContractResult) GetRollback() *BusinessCallData {
	if m != nil {
		return m.Rollback
	}
	return nil
}

func (m *CrossChainContractResult) GetMeta() *CrossChainMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type AnchorContractResult struct {
	Success       bool                    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ExecNamespace string                  `protobuf:"bytes,2,opt,name=execNamespace,proto3" json:"execNamespace,omitempty"`
	Stage         int32                   `protobuf:"varint,3,opt,name=stage,proto3" json:"stage,omitempty"`
	Op            AnchorContractResult_Op `protobuf:"varint,4,opt,name=op,proto3,enum=protos.AnchorContractResult_Op" json:"op,omitempty"`
	// register
	RegHostname  string `protobuf:"bytes,5,opt,name=regHostname,proto3" json:"regHostname,omitempty"`
	RegNamespace string `protobuf:"bytes,6,opt,name=regNamespace,proto3" json:"regNamespace,omitempty"`
	// unregister
	UnregHostname  string `protobuf:"bytes,7,opt,name=unregHostname,proto3" json:"unregHostname,omitempty"`
	UnregNamespace string `protobuf:"bytes,8,opt,name=unregNamespace,proto3" json:"unregNamespace,omitempty"`
	// replace
	OldHostname  string `protobuf:"bytes,9,opt,name=oldHostname,proto3" json:"oldHostname,omitempty"`
	NewHostname  string `protobuf:"bytes,10,opt,name=newHostname,proto3" json:"newHostname,omitempty"`
	OldNamespace string `protobuf:"bytes,11,opt,name=oldNamespace,proto3" json:"oldNamespace,omitempty"`
	NewNamespace string `protobuf:"bytes,12,opt,name=newNamespace,proto3" json:"newNamespace,omitempty"`
}

func (m *AnchorContractResult) Reset()         { *m = AnchorContractResult{} }
func (m *AnchorContractResult) String() string { return proto.CompactTextString(m) }
func (*AnchorContractResult) ProtoMessage()    {}
func (*AnchorContractResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a70e5bee36203e7, []int{3}
}
func (m *AnchorContractResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorContractResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorContractResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnchorContractResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorContractResult.Merge(m, src)
}
func (m *AnchorContractResult) XXX_Size() int {
	return m.Size()
}
func (m *AnchorContractResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorContractResult.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorContractResult proto.InternalMessageInfo

func (m *AnchorContractResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AnchorContractResult) GetExecNamespace() string {
	if m != nil {
		return m.ExecNamespace
	}
	return ""
}

func (m *AnchorContractResult) GetStage() int32 {
	if m != nil {
		return m.Stage
	}
	return 0
}

func (m *AnchorContractResult) GetOp() AnchorContractResult_Op {
	if m != nil {
		return m.Op
	}
	return AnchorContractResult_REGISTER
}

func (m *AnchorContractResult) GetRegHostname() string {
	if m != nil {
		return m.RegHostname
	}
	return ""
}

func (m *AnchorContractResult) GetRegNamespace() string {
	if m != nil {
		return m.RegNamespace
	}
	return ""
}

func (m *AnchorContractResult) GetUnregHostname() string {
	if m != nil {
		return m.UnregHostname
	}
	return ""
}

func (m *AnchorContractResult) GetUnregNamespace() string {
	if m != nil {
		return m.UnregNamespace
	}
	return ""
}

func (m *AnchorContractResult) GetOldHostname() string {
	if m != nil {
		return m.OldHostname
	}
	return ""
}

func (m *AnchorContractResult) GetNewHostname() string {
	if m != nil {
		return m.NewHostname
	}
	return ""
}

func (m *AnchorContractResult) GetOldNamespace() string {
	if m != nil {
		return m.OldNamespace
	}
	return ""
}

func (m *AnchorContractResult) GetNewNamespace() string {
	if m != nil {
		return m.NewNamespace
	}
	return ""
}

// cm parse CrossChainTx, send it to related cm single
type CrossChainTx struct {
	Tx         *Transaction              `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Res        *CrossChainContractResult `protobuf:"bytes,2,opt,name=res,proto3" json:"res,omitempty"`
	TimeoutRes *TimeoutResult            `protobuf:"bytes,3,opt,name=timeoutRes,proto3" json:"timeoutRes,omitempty"`
	Proof      []byte                    `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *CrossChainTx) Reset()         { *m = CrossChainTx{} }
func (m *CrossChainTx) String() string { return proto.CompactTextString(m) }
func (*CrossChainTx) ProtoMessage()    {}
func (*CrossChainTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a70e5bee36203e7, []int{4}
}
func (m *CrossChainTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainTx.Merge(m, src)
}
func (m *CrossChainTx) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainTx) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainTx.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainTx proto.InternalMessageInfo

func (m *CrossChainTx) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *CrossChainTx) GetRes() *CrossChainContractResult {
	if m != nil {
		return m.Res
	}
	return nil
}

func (m *CrossChainTx) GetTimeoutRes() *TimeoutResult {
	if m != nil {
		return m.TimeoutRes
	}
	return nil
}

func (m *CrossChainTx) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

type AnchorTx struct {
	Tx    *Transaction          `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Res   *AnchorContractResult `protobuf:"bytes,2,opt,name=res,proto3" json:"res,omitempty"`
	Proof []byte                `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *AnchorTx) Reset()         { *m = AnchorTx{} }
func (m *AnchorTx) String() string { return proto.CompactTextString(m) }
func (*AnchorTx) ProtoMessage()    {}
func (*AnchorTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a70e5bee36203e7, []int{5}
}
func (m *AnchorTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnchorTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTx.Merge(m, src)
}
func (m *AnchorTx) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTx) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTx.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTx proto.InternalMessageInfo

func (m *AnchorTx) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *AnchorTx) GetRes() *AnchorContractResult {
	if m != nil {
		return m.Res
	}
	return nil
}

func (m *AnchorTx) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

// CrossChainEvent holds CrossChainTx generated in a block
type CrossChainEvent struct {
	SeqNo uint64          `protobuf:"varint,1,opt,name=seqNo,proto3" json:"seqNo,omitempty"`
	Txs   []*CrossChainTx `protobuf:"bytes,2,rep,name=txs,proto3" json:"txs,omitempty"`
	Tx    *AnchorTx       `protobuf:"bytes,3,opt,name=tx,proto3" json:"tx,omitempty"`
	Ttx   *TimeoutTx      `protobuf:"bytes,4,opt,name=ttx,proto3" json:"ttx,omitempty"`
}

func (m *CrossChainEvent) Reset()         { *m = CrossChainEvent{} }
func (m *CrossChainEvent) String() string { return proto.CompactTextString(m) }
func (*CrossChainEvent) ProtoMessage()    {}
func (*CrossChainEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a70e5bee36203e7, []int{6}
}
func (m *CrossChainEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainEvent.Merge(m, src)
}
func (m *CrossChainEvent) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainEvent proto.InternalMessageInfo

func (m *CrossChainEvent) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *CrossChainEvent) GetTxs() []*CrossChainTx {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *CrossChainEvent) GetTx() *AnchorTx {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *CrossChainEvent) GetTtx() *TimeoutTx {
	if m != nil {
		return m.Ttx
	}
	return nil
}

// CrossChainCheckpoint holds CrossChainEvent between two stable checkpoints.
type CrossChainCheckpoint struct {
	Namespace string             `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Prev      uint64             `protobuf:"varint,2,opt,name=prev,proto3" json:"prev,omitempty"`
	Now       uint64             `protobuf:"varint,3,opt,name=now,proto3" json:"now,omitempty"`
	Events    []*CrossChainEvent `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *CrossChainCheckpoint) Reset()         { *m = CrossChainCheckpoint{} }
func (m *CrossChainCheckpoint) String() string { return proto.CompactTextString(m) }
func (*CrossChainCheckpoint) ProtoMessage()    {}
func (*CrossChainCheckpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a70e5bee36203e7, []int{7}
}
func (m *CrossChainCheckpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainCheckpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainCheckpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainCheckpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainCheckpoint.Merge(m, src)
}
func (m *CrossChainCheckpoint) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainCheckpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainCheckpoint.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainCheckpoint proto.InternalMessageInfo

func (m *CrossChainCheckpoint) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CrossChainCheckpoint) GetPrev() uint64 {
	if m != nil {
		return m.Prev
	}
	return 0
}

func (m *CrossChainCheckpoint) GetNow() uint64 {
	if m != nil {
		return m.Now
	}
	return 0
}

func (m *CrossChainCheckpoint) GetEvents() []*CrossChainEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type CrossChainExtra struct {
	CrossChainID string `protobuf:"bytes,1,opt,name=crossChainID,proto3" json:"crossChainID,omitempty"`
	Stage        int32  `protobuf:"varint,2,opt,name=stage,proto3" json:"stage,omitempty"`
	Extra        []byte `protobuf:"bytes,3,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (m *CrossChainExtra) Reset()         { *m = CrossChainExtra{} }
func (m *CrossChainExtra) String() string { return proto.CompactTextString(m) }
func (*CrossChainExtra) ProtoMessage()    {}
func (*CrossChainExtra) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a70e5bee36203e7, []int{8}
}
func (m *CrossChainExtra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainExtra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainExtra.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainExtra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainExtra.Merge(m, src)
}
func (m *CrossChainExtra) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainExtra) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainExtra.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainExtra proto.InternalMessageInfo

func (m *CrossChainExtra) GetCrossChainID() string {
	if m != nil {
		return m.CrossChainID
	}
	return ""
}

func (m *CrossChainExtra) GetStage() int32 {
	if m != nil {
		return m.Stage
	}
	return 0
}

func (m *CrossChainExtra) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type TxParam struct {
	ToAddr    []byte                  `protobuf:"bytes,1,opt,name=toAddr,proto3" json:"toAddr,omitempty"`
	Payload   []byte                  `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	TxType    Transaction_TxType      `protobuf:"varint,3,opt,name=txType,proto3,enum=protos.Transaction_TxType" json:"txType,omitempty"`
	VmType    TransactionValue_VmType `protobuf:"varint,4,opt,name=vmType,proto3,enum=protos.TransactionValue_VmType" json:"vmType,omitempty"`
	Extra     []byte                  `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`
	Timestamp int64                   `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *TxParam) Reset()         { *m = TxParam{} }
func (m *TxParam) String() string { return proto.CompactTextString(m) }
func (*TxParam) ProtoMessage()    {}
func (*TxParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a70e5bee36203e7, []int{9}
}
func (m *TxParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxParam.Merge(m, src)
}
func (m *TxParam) XXX_Size() int {
	return m.Size()
}
func (m *TxParam) XXX_DiscardUnknown() {
	xxx_messageInfo_TxParam.DiscardUnknown(m)
}

var xxx_messageInfo_TxParam proto.InternalMessageInfo

func (m *TxParam) GetToAddr() []byte {
	if m != nil {
		return m.ToAddr
	}
	return nil
}

func (m *TxParam) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *TxParam) GetTxType() Transaction_TxType {
	if m != nil {
		return m.TxType
	}
	return Transaction_NTX
}

func (m *TxParam) GetVmType() TransactionValue_VmType {
	if m != nil {
		return m.VmType
	}
	return TransactionValue_EVM
}

func (m *TxParam) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (m *TxParam) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type TxToSend struct {
	Tx       *Transaction            `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	TargetNs string                  `protobuf:"bytes,2,opt,name=targetNs,proto3" json:"targetNs,omitempty"`
	Status   TxToSend_TxToSendStatus `protobuf:"varint,3,opt,name=status,proto3,enum=protos.TxToSend_TxToSendStatus" json:"status,omitempty"`
	Params   *TxParam                `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *TxToSend) Reset()         { *m = TxToSend{} }
func (m *TxToSend) String() string { return proto.CompactTextString(m) }
func (*TxToSend) ProtoMessage()    {}
func (*TxToSend) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a70e5bee36203e7, []int{10}
}
func (m *TxToSend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxToSend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxToSend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxToSend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxToSend.Merge(m, src)
}
func (m *TxToSend) XXX_Size() int {
	return m.Size()
}
func (m *TxToSend) XXX_DiscardUnknown() {
	xxx_messageInfo_TxToSend.DiscardUnknown(m)
}

var xxx_messageInfo_TxToSend proto.InternalMessageInfo

func (m *TxToSend) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *TxToSend) GetTargetNs() string {
	if m != nil {
		return m.TargetNs
	}
	return ""
}

func (m *TxToSend) GetStatus() TxToSend_TxToSendStatus {
	if m != nil {
		return m.Status
	}
	return TxToSend_TOSEND
}

func (m *TxToSend) GetParams() *TxParam {
	if m != nil {
		return m.Params
	}
	return nil
}

// user called TimeoutTx
type TimeoutTx struct {
	Tx    *Transaction   `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Res   *TimeoutResult `protobuf:"bytes,2,opt,name=res,proto3" json:"res,omitempty"`
	Proof []byte         `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *TimeoutTx) Reset()         { *m = TimeoutTx{} }
func (m *TimeoutTx) String() string { return proto.CompactTextString(m) }
func (*TimeoutTx) ProtoMessage()    {}
func (*TimeoutTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a70e5bee36203e7, []int{11}
}
func (m *TimeoutTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeoutTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeoutTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeoutTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeoutTx.Merge(m, src)
}
func (m *TimeoutTx) XXX_Size() int {
	return m.Size()
}
func (m *TimeoutTx) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeoutTx.DiscardUnknown(m)
}

var xxx_messageInfo_TimeoutTx proto.InternalMessageInfo

func (m *TimeoutTx) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *TimeoutTx) GetRes() *TimeoutResult {
	if m != nil {
		return m.Res
	}
	return nil
}

func (m *TimeoutTx) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

type TimeoutResult struct {
	// 如果要构造构造后序交易，则依赖这个数据来构造
	Result       *CrossChainContractResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	CrossChainID string                    `protobuf:"bytes,2,opt,name=crossChainID,proto3" json:"crossChainID,omitempty"`
	// 被timeout状态拦截到的交易阶段，可以分析出需要哪个namespace参与，同时可以确定是要构造后序交易，还是需要直接操作log
	TriggerTimeoutStage int32 `protobuf:"varint,3,opt,name=triggerTimeoutStage,proto3" json:"triggerTimeoutStage,omitempty"`
}

func (m *TimeoutResult) Reset()         { *m = TimeoutResult{} }
func (m *TimeoutResult) String() string { return proto.CompactTextString(m) }
func (*TimeoutResult) ProtoMessage()    {}
func (*TimeoutResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a70e5bee36203e7, []int{12}
}
func (m *TimeoutResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeoutResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeoutResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeoutResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeoutResult.Merge(m, src)
}
func (m *TimeoutResult) XXX_Size() int {
	return m.Size()
}
func (m *TimeoutResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeoutResult.DiscardUnknown(m)
}

var xxx_messageInfo_TimeoutResult proto.InternalMessageInfo

func (m *TimeoutResult) GetResult() *CrossChainContractResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *TimeoutResult) GetCrossChainID() string {
	if m != nil {
		return m.CrossChainID
	}
	return ""
}

func (m *TimeoutResult) GetTriggerTimeoutStage() int32 {
	if m != nil {
		return m.TriggerTimeoutStage
	}
	return 0
}

type TimeoutStatus struct {
	FromConfirm TimeoutStatus_ConfirmStatus `protobuf:"varint,1,opt,name=fromConfirm,proto3,enum=protos.TimeoutStatus_ConfirmStatus" json:"fromConfirm,omitempty"`
	FromResult  TimeoutStatus_ResultStatus  `protobuf:"varint,2,opt,name=fromResult,proto3,enum=protos.TimeoutStatus_ResultStatus" json:"fromResult,omitempty"`
	ToConfirm   TimeoutStatus_ConfirmStatus `protobuf:"varint,3,opt,name=toConfirm,proto3,enum=protos.TimeoutStatus_ConfirmStatus" json:"toConfirm,omitempty"`
	ToResult    TimeoutStatus_ResultStatus  `protobuf:"varint,4,opt,name=toResult,proto3,enum=protos.TimeoutStatus_ResultStatus" json:"toResult,omitempty"`
}

func (m *TimeoutStatus) Reset()         { *m = TimeoutStatus{} }
func (m *TimeoutStatus) String() string { return proto.CompactTextString(m) }
func (*TimeoutStatus) ProtoMessage()    {}
func (*TimeoutStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a70e5bee36203e7, []int{13}
}
func (m *TimeoutStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeoutStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeoutStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeoutStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeoutStatus.Merge(m, src)
}
func (m *TimeoutStatus) XXX_Size() int {
	return m.Size()
}
func (m *TimeoutStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeoutStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TimeoutStatus proto.InternalMessageInfo

func (m *TimeoutStatus) GetFromConfirm() TimeoutStatus_ConfirmStatus {
	if m != nil {
		return m.FromConfirm
	}
	return TimeoutStatus_IRRELAVENT
}

func (m *TimeoutStatus) GetFromResult() TimeoutStatus_ResultStatus {
	if m != nil {
		return m.FromResult
	}
	return TimeoutStatus_NONVALUE
}

func (m *TimeoutStatus) GetToConfirm() TimeoutStatus_ConfirmStatus {
	if m != nil {
		return m.ToConfirm
	}
	return TimeoutStatus_IRRELAVENT
}

func (m *TimeoutStatus) GetToResult() TimeoutStatus_ResultStatus {
	if m != nil {
		return m.ToResult
	}
	return TimeoutStatus_NONVALUE
}

func init() {
	proto.RegisterEnum("protos.AnchorContractResult_Op", AnchorContractResult_Op_name, AnchorContractResult_Op_value)
	proto.RegisterEnum("protos.TxToSend_TxToSendStatus", TxToSend_TxToSendStatus_name, TxToSend_TxToSendStatus_value)
	proto.RegisterEnum("protos.TimeoutStatus_ConfirmStatus", TimeoutStatus_ConfirmStatus_name, TimeoutStatus_ConfirmStatus_value)
	proto.RegisterEnum("protos.TimeoutStatus_ResultStatus", TimeoutStatus_ResultStatus_name, TimeoutStatus_ResultStatus_value)
	proto.RegisterType((*CrossChainMeta)(nil), "protos.CrossChainMeta")
	proto.RegisterType((*BusinessCallData)(nil), "protos.BusinessCallData")
	proto.RegisterType((*CrossChainContractResult)(nil), "protos.CrossChainContractResult")
	proto.RegisterType((*AnchorContractResult)(nil), "protos.AnchorContractResult")
	proto.RegisterType((*CrossChainTx)(nil), "protos.CrossChainTx")
	proto.RegisterType((*AnchorTx)(nil), "protos.AnchorTx")
	proto.RegisterType((*CrossChainEvent)(nil), "protos.CrossChainEvent")
	proto.RegisterType((*CrossChainCheckpoint)(nil), "protos.CrossChainCheckpoint")
	proto.RegisterType((*CrossChainExtra)(nil), "protos.CrossChainExtra")
	proto.RegisterType((*TxParam)(nil), "protos.TxParam")
	proto.RegisterType((*TxToSend)(nil), "protos.TxToSend")
	proto.RegisterType((*TimeoutTx)(nil), "protos.TimeoutTx")
	proto.RegisterType((*TimeoutResult)(nil), "protos.TimeoutResult")
	proto.RegisterType((*TimeoutStatus)(nil), "protos.TimeoutStatus")
}

func init() { proto.RegisterFile("cross_chain.proto", fileDescriptor_2a70e5bee36203e7) }

var fileDescriptor_2a70e5bee36203e7 = []byte{
	// 1201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xc1, 0x6e, 0xdb, 0x46,
	0x10, 0x15, 0x29, 0x59, 0x96, 0x46, 0xb2, 0xa2, 0x6c, 0xdc, 0x94, 0x08, 0x02, 0x55, 0x60, 0x8a,
	0x24, 0x28, 0x10, 0x29, 0x60, 0x5a, 0xa4, 0xa7, 0x16, 0xb2, 0xcc, 0xb4, 0x0e, 0x1c, 0x39, 0x58,
	0xd1, 0x3e, 0xf4, 0x52, 0xd0, 0xd4, 0x5a, 0x12, 0x22, 0x72, 0x59, 0x72, 0x65, 0xd3, 0xdf, 0xd0,
	0x4b, 0x81, 0x02, 0xbd, 0x16, 0xe8, 0x37, 0xf4, 0x23, 0x7a, 0xcc, 0xa5, 0x40, 0x0f, 0x3d, 0x14,
	0xf6, 0xbd, 0xdf, 0x50, 0xec, 0x2e, 0x45, 0x2e, 0x65, 0x37, 0x71, 0xd1, 0x93, 0x38, 0xc3, 0x37,
	0x33, 0x6f, 0x66, 0x1e, 0x77, 0x05, 0xb7, 0xbd, 0x88, 0xc6, 0xf1, 0xb7, 0xde, 0xcc, 0x9d, 0x07,
	0xbd, 0x30, 0xa2, 0x8c, 0xa2, 0xaa, 0xf8, 0x89, 0xef, 0xed, 0x4c, 0xe7, 0x6c, 0xb6, 0x3c, 0xee,
	0x79, 0xd4, 0xef, 0xcf, 0xce, 0x43, 0x12, 0x09, 0x50, 0x7f, 0x4a, 0x9f, 0xcc, 0x42, 0xef, 0x89,
	0x47, 0x7d, 0x9f, 0x06, 0x7d, 0x76, 0x1e, 0x92, 0xb8, 0x2f, 0x23, 0xfa, 0x2c, 0x72, 0x83, 0xd8,
	0xf5, 0xd8, 0x9c, 0xa6, 0xb9, 0xcc, 0x97, 0xd0, 0x1a, 0xf2, 0x02, 0x43, 0x1e, 0xfa, 0x8a, 0x30,
	0x17, 0x99, 0xd0, 0xf4, 0x32, 0xcf, 0xde, 0xae, 0xa1, 0x75, 0xb5, 0xc7, 0x75, 0x5c, 0xf0, 0xa1,
	0x6d, 0xd8, 0x88, 0x99, 0x3b, 0x25, 0x86, 0xde, 0xd5, 0x1e, 0x6f, 0x60, 0x69, 0x98, 0x0c, 0xda,
	0x3b, 0xcb, 0x78, 0x1e, 0x90, 0x38, 0x1e, 0xba, 0x8b, 0xc5, 0xae, 0xcb, 0x5c, 0xd4, 0x01, 0xf0,
	0x09, 0x9b, 0xd1, 0xc9, 0xc8, 0xf5, 0x49, 0x9a, 0x4b, 0xf1, 0xf0, 0xf7, 0xa1, 0x1b, 0xb9, 0xbe,
	0xc3, 0x69, 0x1a, 0x7a, 0xb7, 0xcc, 0xdf, 0xe7, 0x1e, 0xd4, 0x85, 0x86, 0xb0, 0x8e, 0xdc, 0xc5,
	0x92, 0xc4, 0x46, 0x59, 0x00, 0x54, 0x97, 0xf9, 0x8b, 0x0e, 0x46, 0xde, 0xc2, 0x90, 0x06, 0x2c,
	0x72, 0x3d, 0x86, 0x49, 0xbc, 0x5c, 0x30, 0xd4, 0x86, 0x72, 0x44, 0x58, 0x5a, 0x97, 0x3f, 0x22,
	0x03, 0x36, 0xe3, 0xa5, 0xe7, 0x91, 0x38, 0x16, 0xe4, 0x6b, 0x78, 0x65, 0xa2, 0x7b, 0x50, 0x63,
	0x6e, 0x34, 0x25, 0x6c, 0xc4, 0xeb, 0xf0, 0x80, 0xcc, 0x46, 0x0f, 0xa1, 0x25, 0x9f, 0x57, 0xf9,
	0x8d, 0x8a, 0x40, 0xac, 0x79, 0xd1, 0xa7, 0x50, 0xf3, 0xd2, 0xd6, 0x8d, 0x8d, 0xae, 0xf6, 0xb8,
	0x61, 0x19, 0x72, 0xd0, 0x71, 0x6f, 0x7d, 0x34, 0x38, 0x43, 0xf2, 0xa8, 0x88, 0x2e, 0x16, 0xc7,
	0xae, 0xf7, 0xc6, 0xa8, 0xbe, 0x2f, 0x6a, 0x85, 0x44, 0x9f, 0x40, 0xc5, 0x27, 0xcc, 0x35, 0x36,
	0x45, 0xc4, 0xdd, 0x55, 0x44, 0x71, 0x9d, 0x58, 0x60, 0xcc, 0xbf, 0xcb, 0xb0, 0x3d, 0x08, 0xbc,
	0x19, 0x8d, 0xd6, 0x06, 0xa4, 0x8c, 0x43, 0x2b, 0x8e, 0xe3, 0x63, 0xd8, 0x22, 0x09, 0xf1, 0xf8,
	0x96, 0xe2, 0xd0, 0xf5, 0xe4, 0xae, 0xeb, 0xb8, 0xe8, 0xcc, 0x95, 0x50, 0x56, 0x94, 0x80, 0xfa,
	0xa0, 0xd3, 0x50, 0x8c, 0xa8, 0x65, 0x7d, 0xb4, 0x22, 0x76, 0x5d, 0xfd, 0xde, 0x41, 0x88, 0x75,
	0x1a, 0xf2, 0x35, 0x47, 0x64, 0xfa, 0x35, 0x8d, 0x59, 0xc0, 0x75, 0xb2, 0x21, 0x4a, 0xa9, 0x2e,
	0x2e, 0xcb, 0x88, 0x4c, 0x73, 0x36, 0x55, 0x29, 0x4b, 0xd5, 0xc7, 0x29, 0x2f, 0x03, 0x35, 0xcf,
	0xa6, 0xa4, 0x5c, 0x70, 0xf2, 0x5d, 0x0a, 0x47, 0x9e, 0xab, 0x26, 0x77, 0x59, 0xf4, 0x72, 0x4e,
	0x74, 0x31, 0xc9, 0x72, 0xd5, 0x25, 0x27, 0xc5, 0xc5, 0x11, 0x01, 0x39, 0xcb, 0x10, 0x20, 0x11,
	0x8a, 0x8b, 0xb3, 0xa6, 0x8b, 0x49, 0x5e, 0xa9, 0x21, 0x59, 0xab, 0x3e, 0x8e, 0x09, 0xc8, 0x59,
	0x8e, 0x69, 0x4a, 0x8c, 0xea, 0x33, 0xfb, 0xa0, 0x1f, 0x84, 0xa8, 0x09, 0x35, 0x6c, 0x7f, 0xb5,
	0x37, 0x76, 0x6c, 0xdc, 0x2e, 0xa1, 0x16, 0xc0, 0xe1, 0x28, 0xb3, 0x35, 0xd4, 0x80, 0x4d, 0x6c,
	0xbf, 0xde, 0x1f, 0x0c, 0xed, 0xb6, 0x6e, 0xfe, 0xaa, 0x41, 0x33, 0x57, 0x82, 0x93, 0xa0, 0x07,
	0xa0, 0xb3, 0x44, 0xec, 0xb8, 0x61, 0xdd, 0x59, 0xad, 0xc4, 0xc9, 0xcf, 0x03, 0xac, 0xb3, 0x04,
	0x59, 0xfc, 0x73, 0x91, 0x1f, 0x46, 0xc3, 0xea, 0x5e, 0x55, 0x54, 0x71, 0x79, 0xfc, 0x83, 0x8a,
	0xd1, 0x67, 0x00, 0x6c, 0xee, 0x13, 0xba, 0xe4, 0x5e, 0x21, 0x83, 0x86, 0xf5, 0x41, 0x56, 0x20,
	0x7b, 0xc3, 0xf1, 0x0a, 0x90, 0x0b, 0x27, 0x8c, 0x28, 0x3d, 0x11, 0x2a, 0x69, 0x62, 0x69, 0x98,
	0x4b, 0xa8, 0x49, 0x99, 0xdc, 0x94, 0x71, 0x4f, 0x65, 0x7c, 0xff, 0x5d, 0x52, 0x93, 0x6c, 0xb3,
	0xb2, 0x65, 0xb5, 0xec, 0x4f, 0x1a, 0xdc, 0xca, 0xbb, 0xb4, 0x4f, 0x49, 0xc0, 0x84, 0xb2, 0xc9,
	0x77, 0x23, 0x2a, 0x18, 0x54, 0xb0, 0x34, 0xd0, 0x43, 0x28, 0xb3, 0x44, 0x1e, 0x54, 0x0d, 0x6b,
	0xfb, 0xea, 0x84, 0x9c, 0x04, 0x73, 0x00, 0xea, 0x0a, 0xf2, 0x72, 0x1a, 0xed, 0x22, 0x2d, 0x27,
	0x11, 0xcc, 0x1f, 0x40, 0x99, 0xb1, 0x44, 0xb4, 0xdf, 0xb0, 0x6e, 0xaf, 0x0d, 0x4c, 0xa4, 0x61,
	0x89, 0xf9, 0xbd, 0x06, 0xdb, 0xca, 0xf8, 0x67, 0xc4, 0x7b, 0x13, 0xd2, 0x79, 0xc0, 0xd0, 0x7d,
	0xa8, 0x07, 0x99, 0x62, 0xe4, 0xf1, 0x96, 0x3b, 0x10, 0x82, 0x4a, 0x18, 0x91, 0x53, 0x31, 0x96,
	0x0a, 0x16, 0xcf, 0xfc, 0x28, 0x0c, 0xe8, 0x99, 0xa0, 0x54, 0xc1, 0xfc, 0x11, 0xf5, 0xa1, 0x4a,
	0x78, 0xab, 0xb1, 0x51, 0x11, 0xed, 0x7c, 0x78, 0xb5, 0x1d, 0x31, 0x0a, 0x9c, 0xc2, 0x4c, 0xb7,
	0x30, 0xa5, 0x84, 0x45, 0xff, 0xe3, 0xb6, 0xe0, 0x5e, 0xc2, 0x53, 0xac, 0x36, 0x21, 0x0c, 0xf3,
	0x4f, 0x0d, 0x36, 0x9d, 0xe4, 0x35, 0x3f, 0xdf, 0xd1, 0x5d, 0xa8, 0x32, 0x3a, 0x98, 0x4c, 0x22,
	0x91, 0xb5, 0x89, 0x53, 0x8b, 0x9f, 0x59, 0xa1, 0x7b, 0xbe, 0xa0, 0xee, 0x44, 0x64, 0x6c, 0xe2,
	0x95, 0x89, 0x2c, 0xa8, 0xb2, 0x84, 0x5f, 0x1c, 0x22, 0x69, 0xcb, 0xba, 0x77, 0x8d, 0x6c, 0x7a,
	0x8e, 0x40, 0xe0, 0x14, 0x89, 0x9e, 0x43, 0xf5, 0x54, 0x5c, 0x36, 0xeb, 0xe7, 0x95, 0x12, 0x23,
	0xae, 0x9a, 0xde, 0x91, 0x2f, 0x03, 0x25, 0x3c, 0x6f, 0x60, 0x43, 0x69, 0x80, 0x2f, 0x86, 0xab,
	0x3c, 0x66, 0xae, 0x1f, 0x8a, 0x43, 0xaa, 0x8c, 0x73, 0x87, 0xf9, 0xbb, 0x06, 0x35, 0x27, 0x71,
	0xe8, 0x98, 0x04, 0x93, 0x9b, 0x09, 0x5c, 0xbd, 0x95, 0xf4, 0xb5, 0x5b, 0xe9, 0x39, 0x54, 0x63,
	0xe6, 0xb2, 0x65, 0x9c, 0xb6, 0x9b, 0x53, 0x4f, 0x4b, 0x64, 0x0f, 0x63, 0x01, 0xc3, 0x29, 0x1c,
	0x3d, 0x82, 0xaa, 0xb8, 0x42, 0xe3, 0x54, 0x7e, 0xb7, 0xf2, 0x40, 0x31, 0x7a, 0x9c, 0xbe, 0x36,
	0x1f, 0x42, 0xab, 0x98, 0x02, 0x01, 0x54, 0x9d, 0x83, 0xb1, 0x3d, 0xda, 0x6d, 0x97, 0x50, 0x0d,
	0x2a, 0x63, 0x7b, 0xe4, 0xb4, 0x35, 0x93, 0x42, 0x3d, 0x53, 0xee, 0xcd, 0xfa, 0x7a, 0xa4, 0x7e,
	0xb8, 0xff, 0x72, 0x5e, 0xbc, 0xe3, 0x8b, 0xfd, 0x59, 0x83, 0xad, 0x02, 0x18, 0x7d, 0x0e, 0xd5,
	0x48, 0x3c, 0xa5, 0x95, 0xdf, 0x7f, 0x7c, 0xa5, 0xf8, 0x2b, 0x1a, 0xd6, 0xaf, 0xd1, 0xf0, 0x53,
	0xb8, 0xc3, 0xa2, 0xf9, 0x74, 0x4a, 0xa2, 0xb4, 0xea, 0x58, 0xb9, 0xf5, 0xae, 0x7b, 0x65, 0xfe,
	0x58, 0xce, 0x18, 0xa6, 0xa3, 0xb3, 0xa1, 0x71, 0x12, 0x51, 0x7f, 0x48, 0x83, 0x93, 0x79, 0xe4,
	0x0b, 0x9a, 0x2d, 0xeb, 0xc1, 0x5a, 0xeb, 0x12, 0xdb, 0x4b, 0x41, 0xe9, 0xde, 0xd4, 0x38, 0xb4,
	0x03, 0xc0, 0x4d, 0xd9, 0x84, 0x20, 0xdb, 0xb2, 0xcc, 0xeb, 0xb3, 0x48, 0x4c, 0x9a, 0x44, 0x89,
	0x42, 0x03, 0xa8, 0x33, 0xba, 0x22, 0x52, 0xbe, 0x39, 0x91, 0x3c, 0x0a, 0x7d, 0x01, 0x35, 0x46,
	0x53, 0x12, 0x95, 0x1b, 0x93, 0xc8, 0x62, 0xcc, 0x2f, 0x61, 0xab, 0x90, 0x9b, 0xdf, 0x67, 0x7b,
	0x18, 0xdb, 0xfb, 0x83, 0x23, 0xae, 0xa9, 0x12, 0xba, 0x05, 0x8d, 0xc3, 0xd1, 0xf0, 0x60, 0xf4,
	0x62, 0x0f, 0xbf, 0xb2, 0x77, 0xdb, 0x1a, 0xda, 0x82, 0x7a, 0x6e, 0xea, 0xe6, 0x33, 0x68, 0xaa,
	0xa9, 0xf9, 0xed, 0x38, 0x3a, 0x18, 0x1d, 0x0d, 0xf6, 0x0f, 0xed, 0x76, 0x89, 0xdf, 0x86, 0xe3,
	0xc3, 0xe1, 0xd0, 0x1e, 0x8f, 0xdb, 0x1a, 0x17, 0xea, 0x8b, 0xc1, 0xde, 0x7e, 0x5b, 0xdf, 0x79,
	0xf9, 0xdb, 0x45, 0x47, 0x7b, 0x7b, 0xd1, 0xd1, 0xfe, 0xba, 0xe8, 0x68, 0x3f, 0x5c, 0x76, 0x4a,
	0x6f, 0x2f, 0x3b, 0xa5, 0x3f, 0x2e, 0x3b, 0xa5, 0x6f, 0x9e, 0xfe, 0xd7, 0x7f, 0xd3, 0xc7, 0xf2,
	0x7f, 0xf8, 0xb3, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xbb, 0x47, 0x14, 0xa3, 0x0b, 0x00,
	0x00,
}

func (m *CrossChainMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Stage != 0 {
		i = encodeVarintCrossChain(dAtA, i, uint64(m.Stage))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CrossChainID) > 0 {
		i -= len(m.CrossChainID)
		copy(dAtA[i:], m.CrossChainID)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.CrossChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BusinessCallData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusinessCallData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusinessCallData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ParamValues) > 0 {
		for iNdEx := len(m.ParamValues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ParamValues[iNdEx])
			copy(dAtA[i:], m.ParamValues[iNdEx])
			i = encodeVarintCrossChain(dAtA, i, uint64(len(m.ParamValues[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ParamTypes) > 0 {
		for iNdEx := len(m.ParamTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ParamTypes[iNdEx])
			copy(dAtA[i:], m.ParamTypes[iNdEx])
			i = encodeVarintCrossChain(dAtA, i, uint64(len(m.ParamTypes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MethodName) > 0 {
		i -= len(m.MethodName)
		copy(dAtA[i:], m.MethodName)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.MethodName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CrossChainContractResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainContractResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainContractResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Rollback != nil {
		{
			size, err := m.Rollback.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.CallData != nil {
		{
			size, err := m.CallData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TargetContract) > 0 {
		i -= len(m.TargetContract)
		copy(dAtA[i:], m.TargetContract)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.TargetContract)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TargetNs) > 0 {
		i -= len(m.TargetNs)
		copy(dAtA[i:], m.TargetNs)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.TargetNs)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Ret) > 0 {
		i -= len(m.Ret)
		copy(dAtA[i:], m.Ret)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.Ret)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnchorContractResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorContractResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnchorContractResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewNamespace) > 0 {
		i -= len(m.NewNamespace)
		copy(dAtA[i:], m.NewNamespace)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.NewNamespace)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.OldNamespace) > 0 {
		i -= len(m.OldNamespace)
		copy(dAtA[i:], m.OldNamespace)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.OldNamespace)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.NewHostname) > 0 {
		i -= len(m.NewHostname)
		copy(dAtA[i:], m.NewHostname)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.NewHostname)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.OldHostname) > 0 {
		i -= len(m.OldHostname)
		copy(dAtA[i:], m.OldHostname)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.OldHostname)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.UnregNamespace) > 0 {
		i -= len(m.UnregNamespace)
		copy(dAtA[i:], m.UnregNamespace)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.UnregNamespace)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.UnregHostname) > 0 {
		i -= len(m.UnregHostname)
		copy(dAtA[i:], m.UnregHostname)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.UnregHostname)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RegNamespace) > 0 {
		i -= len(m.RegNamespace)
		copy(dAtA[i:], m.RegNamespace)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.RegNamespace)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RegHostname) > 0 {
		i -= len(m.RegHostname)
		copy(dAtA[i:], m.RegHostname)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.RegHostname)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Op != 0 {
		i = encodeVarintCrossChain(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x20
	}
	if m.Stage != 0 {
		i = encodeVarintCrossChain(dAtA, i, uint64(m.Stage))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ExecNamespace) > 0 {
		i -= len(m.ExecNamespace)
		copy(dAtA[i:], m.ExecNamespace)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.ExecNamespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CrossChainTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x22
	}
	if m.TimeoutRes != nil {
		{
			size, err := m.TimeoutRes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Res != nil {
		{
			size, err := m.Res.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Tx != nil {
		{
			size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnchorTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnchorTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Res != nil {
		{
			size, err := m.Res.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Tx != nil {
		{
			size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CrossChainEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ttx != nil {
		{
			size, err := m.Ttx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Tx != nil {
		{
			size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCrossChain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SeqNo != 0 {
		i = encodeVarintCrossChain(dAtA, i, uint64(m.SeqNo))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CrossChainCheckpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainCheckpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainCheckpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCrossChain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Now != 0 {
		i = encodeVarintCrossChain(dAtA, i, uint64(m.Now))
		i--
		dAtA[i] = 0x18
	}
	if m.Prev != 0 {
		i = encodeVarintCrossChain(dAtA, i, uint64(m.Prev))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CrossChainExtra) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainExtra) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainExtra) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Stage != 0 {
		i = encodeVarintCrossChain(dAtA, i, uint64(m.Stage))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CrossChainID) > 0 {
		i -= len(m.CrossChainID)
		copy(dAtA[i:], m.CrossChainID)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.CrossChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintCrossChain(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x2a
	}
	if m.VmType != 0 {
		i = encodeVarintCrossChain(dAtA, i, uint64(m.VmType))
		i--
		dAtA[i] = 0x20
	}
	if m.TxType != 0 {
		i = encodeVarintCrossChain(dAtA, i, uint64(m.TxType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ToAddr) > 0 {
		i -= len(m.ToAddr)
		copy(dAtA[i:], m.ToAddr)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.ToAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxToSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxToSend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxToSend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintCrossChain(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TargetNs) > 0 {
		i -= len(m.TargetNs)
		copy(dAtA[i:], m.TargetNs)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.TargetNs)))
		i--
		dAtA[i] = 0x12
	}
	if m.Tx != nil {
		{
			size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimeoutTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeoutTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeoutTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Res != nil {
		{
			size, err := m.Res.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Tx != nil {
		{
			size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimeoutResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeoutResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeoutResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TriggerTimeoutStage != 0 {
		i = encodeVarintCrossChain(dAtA, i, uint64(m.TriggerTimeoutStage))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CrossChainID) > 0 {
		i -= len(m.CrossChainID)
		copy(dAtA[i:], m.CrossChainID)
		i = encodeVarintCrossChain(dAtA, i, uint64(len(m.CrossChainID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimeoutStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeoutStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeoutStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ToResult != 0 {
		i = encodeVarintCrossChain(dAtA, i, uint64(m.ToResult))
		i--
		dAtA[i] = 0x20
	}
	if m.ToConfirm != 0 {
		i = encodeVarintCrossChain(dAtA, i, uint64(m.ToConfirm))
		i--
		dAtA[i] = 0x18
	}
	if m.FromResult != 0 {
		i = encodeVarintCrossChain(dAtA, i, uint64(m.FromResult))
		i--
		dAtA[i] = 0x10
	}
	if m.FromConfirm != 0 {
		i = encodeVarintCrossChain(dAtA, i, uint64(m.FromConfirm))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrossChain(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrossChain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CrossChainMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CrossChainID)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	if m.Stage != 0 {
		n += 1 + sovCrossChain(uint64(m.Stage))
	}
	return n
}

func (m *BusinessCallData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MethodName)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	if len(m.ParamTypes) > 0 {
		for _, s := range m.ParamTypes {
			l = len(s)
			n += 1 + l + sovCrossChain(uint64(l))
		}
	}
	if len(m.ParamValues) > 0 {
		for _, s := range m.ParamValues {
			l = len(s)
			n += 1 + l + sovCrossChain(uint64(l))
		}
	}
	return n
}

func (m *CrossChainContractResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ret)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	if m.Success {
		n += 2
	}
	l = len(m.TargetNs)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	l = len(m.TargetContract)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	if m.CallData != nil {
		l = m.CallData.Size()
		n += 1 + l + sovCrossChain(uint64(l))
	}
	if m.Rollback != nil {
		l = m.Rollback.Size()
		n += 1 + l + sovCrossChain(uint64(l))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovCrossChain(uint64(l))
	}
	return n
}

func (m *AnchorContractResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.ExecNamespace)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	if m.Stage != 0 {
		n += 1 + sovCrossChain(uint64(m.Stage))
	}
	if m.Op != 0 {
		n += 1 + sovCrossChain(uint64(m.Op))
	}
	l = len(m.RegHostname)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	l = len(m.RegNamespace)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	l = len(m.UnregHostname)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	l = len(m.UnregNamespace)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	l = len(m.OldHostname)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	l = len(m.NewHostname)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	l = len(m.OldNamespace)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	l = len(m.NewNamespace)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	return n
}

func (m *CrossChainTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovCrossChain(uint64(l))
	}
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovCrossChain(uint64(l))
	}
	if m.TimeoutRes != nil {
		l = m.TimeoutRes.Size()
		n += 1 + l + sovCrossChain(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	return n
}

func (m *AnchorTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovCrossChain(uint64(l))
	}
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovCrossChain(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	return n
}

func (m *CrossChainEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeqNo != 0 {
		n += 1 + sovCrossChain(uint64(m.SeqNo))
	}
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovCrossChain(uint64(l))
		}
	}
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovCrossChain(uint64(l))
	}
	if m.Ttx != nil {
		l = m.Ttx.Size()
		n += 1 + l + sovCrossChain(uint64(l))
	}
	return n
}

func (m *CrossChainCheckpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	if m.Prev != 0 {
		n += 1 + sovCrossChain(uint64(m.Prev))
	}
	if m.Now != 0 {
		n += 1 + sovCrossChain(uint64(m.Now))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovCrossChain(uint64(l))
		}
	}
	return n
}

func (m *CrossChainExtra) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CrossChainID)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	if m.Stage != 0 {
		n += 1 + sovCrossChain(uint64(m.Stage))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	return n
}

func (m *TxParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ToAddr)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	if m.TxType != 0 {
		n += 1 + sovCrossChain(uint64(m.TxType))
	}
	if m.VmType != 0 {
		n += 1 + sovCrossChain(uint64(m.VmType))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovCrossChain(uint64(m.Timestamp))
	}
	return n
}

func (m *TxToSend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovCrossChain(uint64(l))
	}
	l = len(m.TargetNs)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovCrossChain(uint64(m.Status))
	}
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovCrossChain(uint64(l))
	}
	return n
}

func (m *TimeoutTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovCrossChain(uint64(l))
	}
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovCrossChain(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	return n
}

func (m *TimeoutResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovCrossChain(uint64(l))
	}
	l = len(m.CrossChainID)
	if l > 0 {
		n += 1 + l + sovCrossChain(uint64(l))
	}
	if m.TriggerTimeoutStage != 0 {
		n += 1 + sovCrossChain(uint64(m.TriggerTimeoutStage))
	}
	return n
}

func (m *TimeoutStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromConfirm != 0 {
		n += 1 + sovCrossChain(uint64(m.FromConfirm))
	}
	if m.FromResult != 0 {
		n += 1 + sovCrossChain(uint64(m.FromResult))
	}
	if m.ToConfirm != 0 {
		n += 1 + sovCrossChain(uint64(m.ToConfirm))
	}
	if m.ToResult != 0 {
		n += 1 + sovCrossChain(uint64(m.ToResult))
	}
	return n
}

func sovCrossChain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrossChain(x uint64) (n int) {
	return sovCrossChain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CrossChainMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BusinessCallData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusinessCallData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusinessCallData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MethodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParamTypes = append(m.ParamTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParamValues = append(m.ParamValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainContractResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainContractResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainContractResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetNs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetNs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CallData == nil {
				m.CallData = &BusinessCallData{}
			}
			if err := m.CallData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rollback == nil {
				m.Rollback = &BusinessCallData{}
			}
			if err := m.Rollback.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &CrossChainMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorContractResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorContractResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorContractResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= AnchorContractResult_Op(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegHostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnregHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnregHostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnregNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnregNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldHostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewHostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &Transaction{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = &CrossChainContractResult{}
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutRes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeoutRes == nil {
				m.TimeoutRes = &TimeoutResult{}
			}
			if err := m.TimeoutRes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &Transaction{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = &AnchorContractResult{}
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNo", wireType)
			}
			m.SeqNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqNo |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &CrossChainTx{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &AnchorTx{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ttx == nil {
				m.Ttx = &TimeoutTx{}
			}
			if err := m.Ttx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainCheckpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainCheckpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainCheckpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prev", wireType)
			}
			m.Prev = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prev |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			m.Now = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Now |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &CrossChainEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainExtra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainExtra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainExtra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddr = append(m.ToAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ToAddr == nil {
				m.ToAddr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxType", wireType)
			}
			m.TxType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxType |= Transaction_TxType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmType", wireType)
			}
			m.VmType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VmType |= TransactionValue_VmType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxToSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxToSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxToSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &Transaction{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetNs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetNs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TxToSend_TxToSendStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &TxParam{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeoutTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeoutTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeoutTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &Transaction{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = &TimeoutResult{}
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeoutResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeoutResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeoutResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &CrossChainContractResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerTimeoutStage", wireType)
			}
			m.TriggerTimeoutStage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TriggerTimeoutStage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeoutStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeoutStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeoutStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromConfirm", wireType)
			}
			m.FromConfirm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromConfirm |= TimeoutStatus_ConfirmStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromResult", wireType)
			}
			m.FromResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromResult |= TimeoutStatus_ResultStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToConfirm", wireType)
			}
			m.ToConfirm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToConfirm |= TimeoutStatus_ConfirmStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToResult", wireType)
			}
			m.ToResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToResult |= TimeoutStatus_ResultStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCrossChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrossChain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrossChain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrossChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrossChain
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCrossChain
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCrossChain
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCrossChain(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCrossChain
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCrossChain = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrossChain   = fmt.Errorf("proto: integer overflow")
)
