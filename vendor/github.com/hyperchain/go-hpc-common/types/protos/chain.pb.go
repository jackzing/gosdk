// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chain.proto

package protos

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Chain struct {
	LatestBlockHash  []byte `protobuf:"bytes,1,opt,name=latestBlockHash,proto3" json:"latestBlockHash,omitempty"`
	ParentBlockHash  []byte `protobuf:"bytes,2,opt,name=parentBlockHash,proto3" json:"parentBlockHash,omitempty"`
	Height           uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	RequiredBlockNum uint64 `protobuf:"varint,4,opt,name=requiredBlockNum,proto3" json:"requiredBlockNum,omitempty"`
	RequireBlockHash []byte `protobuf:"bytes,5,opt,name=requireBlockHash,proto3" json:"requireBlockHash,omitempty"`
	RecoveryNum      uint64 `protobuf:"varint,6,opt,name=recoveryNum,proto3" json:"recoveryNum,omitempty"`
	CurrentTxSum     uint64 `protobuf:"varint,7,opt,name=currentTxSum,proto3" json:"currentTxSum,omitempty"`
	Extra            []byte `protobuf:"bytes,8,opt,name=extra,proto3" json:"extra,omitempty"`
	InvalidTxSum     uint64 `protobuf:"varint,9,opt,name=invalidTxSum,proto3" json:"invalidTxSum,omitempty"`
}

func (m *Chain) Reset()         { *m = Chain{} }
func (m *Chain) String() string { return proto.CompactTextString(m) }
func (*Chain) ProtoMessage()    {}
func (*Chain) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d91b2d037e7a44, []int{0}
}
func (m *Chain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chain.Merge(m, src)
}
func (m *Chain) XXX_Size() int {
	return m.Size()
}
func (m *Chain) XXX_DiscardUnknown() {
	xxx_messageInfo_Chain.DiscardUnknown(m)
}

var xxx_messageInfo_Chain proto.InternalMessageInfo

func (m *Chain) GetLatestBlockHash() []byte {
	if m != nil {
		return m.LatestBlockHash
	}
	return nil
}

func (m *Chain) GetParentBlockHash() []byte {
	if m != nil {
		return m.ParentBlockHash
	}
	return nil
}

func (m *Chain) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Chain) GetRequiredBlockNum() uint64 {
	if m != nil {
		return m.RequiredBlockNum
	}
	return 0
}

func (m *Chain) GetRequireBlockHash() []byte {
	if m != nil {
		return m.RequireBlockHash
	}
	return nil
}

func (m *Chain) GetRecoveryNum() uint64 {
	if m != nil {
		return m.RecoveryNum
	}
	return 0
}

func (m *Chain) GetCurrentTxSum() uint64 {
	if m != nil {
		return m.CurrentTxSum
	}
	return 0
}

func (m *Chain) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (m *Chain) GetInvalidTxSum() uint64 {
	if m != nil {
		return m.InvalidTxSum
	}
	return 0
}

func init() {
	proto.RegisterType((*Chain)(nil), "protos.Chain")
}

func init() { proto.RegisterFile("chain.proto", fileDescriptor_d4d91b2d037e7a44) }

var fileDescriptor_d4d91b2d037e7a44 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x41, 0x4b, 0xf3, 0x30,
	0x18, 0xc7, 0x9b, 0xbd, 0x6b, 0x5f, 0xcd, 0x06, 0x4a, 0x10, 0xe9, 0x29, 0x94, 0x9d, 0x8a, 0xb0,
	0x55, 0xf0, 0x1b, 0xcc, 0x8b, 0x78, 0xf0, 0x30, 0x3d, 0x79, 0xcb, 0xb2, 0x87, 0x26, 0xd8, 0x36,
	0x35, 0x4d, 0xc7, 0xfa, 0x2d, 0xfc, 0x58, 0x82, 0x97, 0x1d, 0x3d, 0x4a, 0xfb, 0x45, 0xa4, 0x89,
	0x60, 0xdd, 0x4e, 0xe1, 0xf9, 0xf1, 0x7b, 0x9e, 0x7f, 0xe0, 0x8f, 0x27, 0x5c, 0x30, 0x59, 0x2c,
	0x4a, 0xad, 0x8c, 0x22, 0x81, 0x7d, 0xaa, 0xd9, 0xc7, 0x08, 0xfb, 0xb7, 0x3d, 0x27, 0x31, 0x3e,
	0xcb, 0x98, 0x81, 0xca, 0x2c, 0x33, 0xc5, 0x5f, 0xee, 0x58, 0x25, 0x42, 0x14, 0xa1, 0x78, 0xba,
	0x3a, 0xc4, 0xbd, 0x59, 0x32, 0x0d, 0xc5, 0xc0, 0x1c, 0x39, 0xf3, 0x00, 0x93, 0x4b, 0x1c, 0x08,
	0x90, 0xa9, 0x30, 0xe1, 0xbf, 0x08, 0xc5, 0xe3, 0xd5, 0xcf, 0x44, 0xae, 0xf0, 0xb9, 0x86, 0xd7,
	0x5a, 0x6a, 0xd8, 0x58, 0xf9, 0xa1, 0xce, 0xc3, 0xb1, 0x35, 0x8e, 0xf8, 0xc0, 0xfd, 0x8d, 0xf3,
	0x6d, 0xdc, 0x11, 0x27, 0x11, 0x9e, 0x68, 0xe0, 0x6a, 0x0b, 0xba, 0xe9, 0x4f, 0x06, 0xf6, 0xe4,
	0x10, 0x91, 0x19, 0x9e, 0xf2, 0x5a, 0xf7, 0xbf, 0x7c, 0xda, 0x3d, 0xd6, 0x79, 0xf8, 0xdf, 0x2a,
	0x7f, 0x18, 0xb9, 0xc0, 0x3e, 0xec, 0x8c, 0x66, 0xe1, 0x89, 0x8d, 0x71, 0x43, 0xbf, 0x29, 0x8b,
	0x2d, 0xcb, 0xe4, 0xc6, 0x6d, 0x9e, 0xba, 0xcd, 0x21, 0x5b, 0xde, 0xbf, 0xb7, 0x14, 0xed, 0x5b,
	0x8a, 0xbe, 0x5a, 0x8a, 0xde, 0x3a, 0xea, 0xed, 0x3b, 0xea, 0x7d, 0x76, 0xd4, 0x7b, 0xbe, 0x4e,
	0xa5, 0x11, 0xf5, 0x7a, 0xc1, 0x55, 0x9e, 0x88, 0xa6, 0x04, 0x6d, 0xcb, 0x48, 0x52, 0x35, 0x17,
	0x25, 0x9f, 0x73, 0x95, 0xe7, 0xaa, 0x48, 0x4c, 0x53, 0x42, 0x95, 0xb8, 0x66, 0xd6, 0xae, 0xa1,
	0x9b, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x03, 0x28, 0x8a, 0x30, 0xb7, 0x01, 0x00, 0x00,
}

func (m *Chain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InvalidTxSum != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.InvalidTxSum))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintChain(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x42
	}
	if m.CurrentTxSum != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.CurrentTxSum))
		i--
		dAtA[i] = 0x38
	}
	if m.RecoveryNum != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.RecoveryNum))
		i--
		dAtA[i] = 0x30
	}
	if len(m.RequireBlockHash) > 0 {
		i -= len(m.RequireBlockHash)
		copy(dAtA[i:], m.RequireBlockHash)
		i = encodeVarintChain(dAtA, i, uint64(len(m.RequireBlockHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RequiredBlockNum != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.RequiredBlockNum))
		i--
		dAtA[i] = 0x20
	}
	if m.Height != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ParentBlockHash) > 0 {
		i -= len(m.ParentBlockHash)
		copy(dAtA[i:], m.ParentBlockHash)
		i = encodeVarintChain(dAtA, i, uint64(len(m.ParentBlockHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LatestBlockHash) > 0 {
		i -= len(m.LatestBlockHash)
		copy(dAtA[i:], m.LatestBlockHash)
		i = encodeVarintChain(dAtA, i, uint64(len(m.LatestBlockHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintChain(dAtA []byte, offset int, v uint64) int {
	offset -= sovChain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Chain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LatestBlockHash)
	if l > 0 {
		n += 1 + l + sovChain(uint64(l))
	}
	l = len(m.ParentBlockHash)
	if l > 0 {
		n += 1 + l + sovChain(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovChain(uint64(m.Height))
	}
	if m.RequiredBlockNum != 0 {
		n += 1 + sovChain(uint64(m.RequiredBlockNum))
	}
	l = len(m.RequireBlockHash)
	if l > 0 {
		n += 1 + l + sovChain(uint64(l))
	}
	if m.RecoveryNum != 0 {
		n += 1 + sovChain(uint64(m.RecoveryNum))
	}
	if m.CurrentTxSum != 0 {
		n += 1 + sovChain(uint64(m.CurrentTxSum))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovChain(uint64(l))
	}
	if m.InvalidTxSum != 0 {
		n += 1 + sovChain(uint64(m.InvalidTxSum))
	}
	return n
}

func sovChain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChain(x uint64) (n int) {
	return sovChain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Chain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestBlockHash = append(m.LatestBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.LatestBlockHash == nil {
				m.LatestBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentBlockHash = append(m.ParentBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentBlockHash == nil {
				m.ParentBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredBlockNum", wireType)
			}
			m.RequiredBlockNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredBlockNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequireBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequireBlockHash = append(m.RequireBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.RequireBlockHash == nil {
				m.RequireBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoveryNum", wireType)
			}
			m.RecoveryNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecoveryNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTxSum", wireType)
			}
			m.CurrentTxSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentTxSum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidTxSum", wireType)
			}
			m.InvalidTxSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvalidTxSum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChain
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthChain
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChain
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChain(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthChain
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChain = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChain   = fmt.Errorf("proto: integer overflow")
)
