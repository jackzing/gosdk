// Copyright 2016-2019 Flato Corp.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package protos;

option go_package = "github.com/hyperchain/go-hpc-common/types/protos";

import "github.com/hyperchain/go-hpc-common/types/protos/checkpoint.proto";

message NvpStateUpdateRequest {
    bytes nodeHash = 1;
}

message NvpPing {
    uint64 view = 1;
    uint64 msgID = 2;
}

message NvpPong {
    uint64 view = 1;
}

message NvpHandshake {
    NvpCheckpoint Checkpoint = 1;
    uint64 Height = 2;
    bytes BlockHash = 3;
    uint64 View = 4;
    NvpAckMessage Message = 5;
    uint32 EncryptionBit = 6;
}

message NvpHandshakeResp {
    uint64 View = 1;
    uint64 MsgID = 2;
    StatsCode Code = 3;
    enum StatsCode {
        NvpHsRetry = 0;
        NvpHsNormal = 1;
        NvpHsRecover = 2;
        NvpHsUnexpected = 3;
    }
}

message NvpGenesis {
    uint64 MsgID = 1;
    uint64 genesis = 2;
    EpochInfo epoch = 3;
    uint64 snapTxSum = 4;
    string filterID = 5;
    bytes block = 6;
    bytes journal = 7;
    bytes receipt = 8;
    uint64 snapInvalidTxSum = 9;
}

message NvpLedgerPacket {
    uint64 MsgID = 1;
    string FilterID = 2;
    bool Last = 3;
    bytes Payload = 4;
    bytes Extra = 5;
}

message NvpLedgerPacketAck {
    uint64 MsgID = 1;
    bool Last = 2;
    NvpAckMessage Message = 3;
}

message NvpBlocks {
    uint64 MsgID = 1;
    repeated bytes blocks = 2;
    repeated bytes journal = 3;
    repeated bytes receipts = 4;
    uint64 StartBlock = 5;
}

message NvpBlockAck {
    uint64 MsgID = 1;
    NvpAckMessage Message = 2;
}

message NvpCheckpoint {
    uint64 Height = 1;
    bytes Hash = 2;
}

message NvpRollback {
    uint64 MsgID = 1;
    uint64 Height = 2;
}

message NvpRollbackAck {
    uint64 MsgID = 1;
    NvpAckMessage Message = 2;
}

message NvpAckMessage {
    bool ok = 1;
    string msg = 2;
}
