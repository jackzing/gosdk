// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lp.proto

package protos

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LPHandshakeResp_StatsCode int32

const (
	LPHandshakeResp_LPHsNormal     LPHandshakeResp_StatsCode = 0
	LPHandshakeResp_LPHsRetry      LPHandshakeResp_StatsCode = 1
	LPHandshakeResp_LPHsRecover    LPHandshakeResp_StatsCode = 2
	LPHandshakeResp_LPHsArchived   LPHandshakeResp_StatsCode = 3
	LPHandshakeResp_LPHsUnexpected LPHandshakeResp_StatsCode = 4
)

var LPHandshakeResp_StatsCode_name = map[int32]string{
	0: "LPHsNormal",
	1: "LPHsRetry",
	2: "LPHsRecover",
	3: "LPHsArchived",
	4: "LPHsUnexpected",
}

var LPHandshakeResp_StatsCode_value = map[string]int32{
	"LPHsNormal":     0,
	"LPHsRetry":      1,
	"LPHsRecover":    2,
	"LPHsArchived":   3,
	"LPHsUnexpected": 4,
}

func (x LPHandshakeResp_StatsCode) String() string {
	return proto.EnumName(LPHandshakeResp_StatsCode_name, int32(x))
}

func (LPHandshakeResp_StatsCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ecbdd5051ac9d08b, []int{4, 0}
}

type LPPing struct {
	View  uint64 `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	MsgID uint64 `protobuf:"varint,2,opt,name=msgID,proto3" json:"msgID,omitempty"`
}

func (m *LPPing) Reset()         { *m = LPPing{} }
func (m *LPPing) String() string { return proto.CompactTextString(m) }
func (*LPPing) ProtoMessage()    {}
func (*LPPing) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecbdd5051ac9d08b, []int{0}
}
func (m *LPPing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LPPing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LPPing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LPPing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LPPing.Merge(m, src)
}
func (m *LPPing) XXX_Size() int {
	return m.Size()
}
func (m *LPPing) XXX_DiscardUnknown() {
	xxx_messageInfo_LPPing.DiscardUnknown(m)
}

var xxx_messageInfo_LPPing proto.InternalMessageInfo

func (m *LPPing) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *LPPing) GetMsgID() uint64 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

type LPPong struct {
	View uint64 `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
}

func (m *LPPong) Reset()         { *m = LPPong{} }
func (m *LPPong) String() string { return proto.CompactTextString(m) }
func (*LPPong) ProtoMessage()    {}
func (*LPPong) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecbdd5051ac9d08b, []int{1}
}
func (m *LPPong) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LPPong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LPPong.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LPPong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LPPong.Merge(m, src)
}
func (m *LPPong) XXX_Size() int {
	return m.Size()
}
func (m *LPPong) XXX_DiscardUnknown() {
	xxx_messageInfo_LPPong.DiscardUnknown(m)
}

var xxx_messageInfo_LPPong proto.InternalMessageInfo

func (m *LPPong) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

type LPRule struct {
	FilterRelay bool   `protobuf:"varint,1,opt,name=filterRelay,proto3" json:"filterRelay,omitempty"`
	FilterRule  string `protobuf:"bytes,2,opt,name=filterRule,proto3" json:"filterRule,omitempty"`
}

func (m *LPRule) Reset()         { *m = LPRule{} }
func (m *LPRule) String() string { return proto.CompactTextString(m) }
func (*LPRule) ProtoMessage()    {}
func (*LPRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecbdd5051ac9d08b, []int{2}
}
func (m *LPRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LPRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LPRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LPRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LPRule.Merge(m, src)
}
func (m *LPRule) XXX_Size() int {
	return m.Size()
}
func (m *LPRule) XXX_DiscardUnknown() {
	xxx_messageInfo_LPRule.DiscardUnknown(m)
}

var xxx_messageInfo_LPRule proto.InternalMessageInfo

func (m *LPRule) GetFilterRelay() bool {
	if m != nil {
		return m.FilterRelay
	}
	return false
}

func (m *LPRule) GetFilterRule() string {
	if m != nil {
		return m.FilterRule
	}
	return ""
}

type LPHandshake struct {
	Checkpoint *LPCheckpoint `protobuf:"bytes,1,opt,name=Checkpoint,proto3" json:"Checkpoint,omitempty"`
	Height     uint64        `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`
	BlockHash  []byte        `protobuf:"bytes,3,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	View       uint64        `protobuf:"varint,4,opt,name=View,proto3" json:"View,omitempty"`
	Rule       *LPRule       `protobuf:"bytes,5,opt,name=Rule,proto3" json:"Rule,omitempty"`
}

func (m *LPHandshake) Reset()         { *m = LPHandshake{} }
func (m *LPHandshake) String() string { return proto.CompactTextString(m) }
func (*LPHandshake) ProtoMessage()    {}
func (*LPHandshake) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecbdd5051ac9d08b, []int{3}
}
func (m *LPHandshake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LPHandshake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LPHandshake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LPHandshake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LPHandshake.Merge(m, src)
}
func (m *LPHandshake) XXX_Size() int {
	return m.Size()
}
func (m *LPHandshake) XXX_DiscardUnknown() {
	xxx_messageInfo_LPHandshake.DiscardUnknown(m)
}

var xxx_messageInfo_LPHandshake proto.InternalMessageInfo

func (m *LPHandshake) GetCheckpoint() *LPCheckpoint {
	if m != nil {
		return m.Checkpoint
	}
	return nil
}

func (m *LPHandshake) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *LPHandshake) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *LPHandshake) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *LPHandshake) GetRule() *LPRule {
	if m != nil {
		return m.Rule
	}
	return nil
}

type LPHandshakeResp struct {
	View  uint64                    `protobuf:"varint,1,opt,name=View,proto3" json:"View,omitempty"`
	MsgID uint64                    `protobuf:"varint,2,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	Block *Block                    `protobuf:"bytes,3,opt,name=block,proto3" json:"block,omitempty"`
	Code  LPHandshakeResp_StatsCode `protobuf:"varint,4,opt,name=Code,proto3,enum=protos.LPHandshakeResp_StatsCode" json:"Code,omitempty"`
}

func (m *LPHandshakeResp) Reset()         { *m = LPHandshakeResp{} }
func (m *LPHandshakeResp) String() string { return proto.CompactTextString(m) }
func (*LPHandshakeResp) ProtoMessage()    {}
func (*LPHandshakeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecbdd5051ac9d08b, []int{4}
}
func (m *LPHandshakeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LPHandshakeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LPHandshakeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LPHandshakeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LPHandshakeResp.Merge(m, src)
}
func (m *LPHandshakeResp) XXX_Size() int {
	return m.Size()
}
func (m *LPHandshakeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_LPHandshakeResp.DiscardUnknown(m)
}

var xxx_messageInfo_LPHandshakeResp proto.InternalMessageInfo

func (m *LPHandshakeResp) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *LPHandshakeResp) GetMsgID() uint64 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *LPHandshakeResp) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *LPHandshakeResp) GetCode() LPHandshakeResp_StatsCode {
	if m != nil {
		return m.Code
	}
	return LPHandshakeResp_LPHsNormal
}

type LPBlocks struct {
	MsgID      uint64   `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	Blocks     [][]byte `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
	Journal    [][]byte `protobuf:"bytes,3,rep,name=journal,proto3" json:"journal,omitempty"`
	Receipts   [][]byte `protobuf:"bytes,4,rep,name=receipts,proto3" json:"receipts,omitempty"`
	StartBlock uint64   `protobuf:"varint,5,opt,name=StartBlock,proto3" json:"StartBlock,omitempty"`
	Rule       *LPRule  `protobuf:"bytes,6,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (m *LPBlocks) Reset()         { *m = LPBlocks{} }
func (m *LPBlocks) String() string { return proto.CompactTextString(m) }
func (*LPBlocks) ProtoMessage()    {}
func (*LPBlocks) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecbdd5051ac9d08b, []int{5}
}
func (m *LPBlocks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LPBlocks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LPBlocks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LPBlocks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LPBlocks.Merge(m, src)
}
func (m *LPBlocks) XXX_Size() int {
	return m.Size()
}
func (m *LPBlocks) XXX_DiscardUnknown() {
	xxx_messageInfo_LPBlocks.DiscardUnknown(m)
}

var xxx_messageInfo_LPBlocks proto.InternalMessageInfo

func (m *LPBlocks) GetMsgID() uint64 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *LPBlocks) GetBlocks() [][]byte {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (m *LPBlocks) GetJournal() [][]byte {
	if m != nil {
		return m.Journal
	}
	return nil
}

func (m *LPBlocks) GetReceipts() [][]byte {
	if m != nil {
		return m.Receipts
	}
	return nil
}

func (m *LPBlocks) GetStartBlock() uint64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func (m *LPBlocks) GetRule() *LPRule {
	if m != nil {
		return m.Rule
	}
	return nil
}

type LPBlockAck struct {
	MsgID   uint64        `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	Message *LPAckMessage `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *LPBlockAck) Reset()         { *m = LPBlockAck{} }
func (m *LPBlockAck) String() string { return proto.CompactTextString(m) }
func (*LPBlockAck) ProtoMessage()    {}
func (*LPBlockAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecbdd5051ac9d08b, []int{6}
}
func (m *LPBlockAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LPBlockAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LPBlockAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LPBlockAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LPBlockAck.Merge(m, src)
}
func (m *LPBlockAck) XXX_Size() int {
	return m.Size()
}
func (m *LPBlockAck) XXX_DiscardUnknown() {
	xxx_messageInfo_LPBlockAck.DiscardUnknown(m)
}

var xxx_messageInfo_LPBlockAck proto.InternalMessageInfo

func (m *LPBlockAck) GetMsgID() uint64 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *LPBlockAck) GetMessage() *LPAckMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type LPCheckpoint struct {
	Height uint64 `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Hash   []byte `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (m *LPCheckpoint) Reset()         { *m = LPCheckpoint{} }
func (m *LPCheckpoint) String() string { return proto.CompactTextString(m) }
func (*LPCheckpoint) ProtoMessage()    {}
func (*LPCheckpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecbdd5051ac9d08b, []int{7}
}
func (m *LPCheckpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LPCheckpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LPCheckpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LPCheckpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LPCheckpoint.Merge(m, src)
}
func (m *LPCheckpoint) XXX_Size() int {
	return m.Size()
}
func (m *LPCheckpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_LPCheckpoint.DiscardUnknown(m)
}

var xxx_messageInfo_LPCheckpoint proto.InternalMessageInfo

func (m *LPCheckpoint) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *LPCheckpoint) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type LPRollback struct {
	MsgID  uint64 `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`
}

func (m *LPRollback) Reset()         { *m = LPRollback{} }
func (m *LPRollback) String() string { return proto.CompactTextString(m) }
func (*LPRollback) ProtoMessage()    {}
func (*LPRollback) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecbdd5051ac9d08b, []int{8}
}
func (m *LPRollback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LPRollback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LPRollback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LPRollback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LPRollback.Merge(m, src)
}
func (m *LPRollback) XXX_Size() int {
	return m.Size()
}
func (m *LPRollback) XXX_DiscardUnknown() {
	xxx_messageInfo_LPRollback.DiscardUnknown(m)
}

var xxx_messageInfo_LPRollback proto.InternalMessageInfo

func (m *LPRollback) GetMsgID() uint64 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *LPRollback) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type LPRollbackAck struct {
	MsgID   uint64        `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	Message *LPAckMessage `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *LPRollbackAck) Reset()         { *m = LPRollbackAck{} }
func (m *LPRollbackAck) String() string { return proto.CompactTextString(m) }
func (*LPRollbackAck) ProtoMessage()    {}
func (*LPRollbackAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecbdd5051ac9d08b, []int{9}
}
func (m *LPRollbackAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LPRollbackAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LPRollbackAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LPRollbackAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LPRollbackAck.Merge(m, src)
}
func (m *LPRollbackAck) XXX_Size() int {
	return m.Size()
}
func (m *LPRollbackAck) XXX_DiscardUnknown() {
	xxx_messageInfo_LPRollbackAck.DiscardUnknown(m)
}

var xxx_messageInfo_LPRollbackAck proto.InternalMessageInfo

func (m *LPRollbackAck) GetMsgID() uint64 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *LPRollbackAck) GetMessage() *LPAckMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type LPAckMessage struct {
	Ok  bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *LPAckMessage) Reset()         { *m = LPAckMessage{} }
func (m *LPAckMessage) String() string { return proto.CompactTextString(m) }
func (*LPAckMessage) ProtoMessage()    {}
func (*LPAckMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecbdd5051ac9d08b, []int{10}
}
func (m *LPAckMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LPAckMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LPAckMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LPAckMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LPAckMessage.Merge(m, src)
}
func (m *LPAckMessage) XXX_Size() int {
	return m.Size()
}
func (m *LPAckMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_LPAckMessage.DiscardUnknown(m)
}

var xxx_messageInfo_LPAckMessage proto.InternalMessageInfo

func (m *LPAckMessage) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *LPAckMessage) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterEnum("protos.LPHandshakeResp_StatsCode", LPHandshakeResp_StatsCode_name, LPHandshakeResp_StatsCode_value)
	proto.RegisterType((*LPPing)(nil), "protos.LPPing")
	proto.RegisterType((*LPPong)(nil), "protos.LPPong")
	proto.RegisterType((*LPRule)(nil), "protos.LPRule")
	proto.RegisterType((*LPHandshake)(nil), "protos.LPHandshake")
	proto.RegisterType((*LPHandshakeResp)(nil), "protos.LPHandshakeResp")
	proto.RegisterType((*LPBlocks)(nil), "protos.LPBlocks")
	proto.RegisterType((*LPBlockAck)(nil), "protos.LPBlockAck")
	proto.RegisterType((*LPCheckpoint)(nil), "protos.LPCheckpoint")
	proto.RegisterType((*LPRollback)(nil), "protos.LPRollback")
	proto.RegisterType((*LPRollbackAck)(nil), "protos.LPRollbackAck")
	proto.RegisterType((*LPAckMessage)(nil), "protos.LPAckMessage")
}

func init() { proto.RegisterFile("lp.proto", fileDescriptor_ecbdd5051ac9d08b) }

var fileDescriptor_ecbdd5051ac9d08b = []byte{
	// 629 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcf, 0x4e, 0xdb, 0x4e,
	0x10, 0xce, 0x26, 0x4e, 0x48, 0x26, 0x10, 0xac, 0x15, 0x42, 0x16, 0x42, 0x56, 0x7e, 0xfe, 0x5d,
	0xb8, 0x90, 0xa0, 0xb4, 0xbd, 0xa0, 0x5e, 0x80, 0x1e, 0x52, 0x14, 0xaa, 0x68, 0x11, 0x3d, 0xf4,
	0xe6, 0x38, 0x5b, 0xdb, 0xf5, 0x9f, 0xb5, 0xbc, 0x1b, 0xda, 0xbc, 0x45, 0x5f, 0xa5, 0x7d, 0x8a,
	0x1e, 0x39, 0xf6, 0x58, 0xc1, 0x5b, 0xf4, 0x54, 0xed, 0xd8, 0x60, 0x23, 0xc1, 0xa1, 0x52, 0x4f,
	0xd9, 0xf9, 0xbe, 0xd9, 0x9d, 0xef, 0x9b, 0x99, 0x18, 0xba, 0x71, 0x36, 0xca, 0x72, 0xa1, 0x04,
	0xed, 0xe0, 0x8f, 0xdc, 0x7b, 0xed, 0x87, 0x2a, 0x58, 0x2d, 0x46, 0x9e, 0x48, 0xc6, 0xc1, 0x3a,
	0xe3, 0xb9, 0x17, 0xb8, 0x61, 0x3a, 0xf6, 0xc5, 0x61, 0x90, 0x79, 0x87, 0x9e, 0x48, 0x12, 0x91,
	0x8e, 0xd5, 0x3a, 0xe3, 0x72, 0x5c, 0xdc, 0x18, 0x2f, 0x62, 0xe1, 0x45, 0xc5, 0x2b, 0xce, 0x04,
	0x3a, 0xb3, 0xf9, 0x3c, 0x4c, 0x7d, 0x4a, 0xc1, 0xb8, 0x0e, 0xf9, 0x67, 0x8b, 0x0c, 0xc9, 0x81,
	0xc1, 0xf0, 0x4c, 0x77, 0xa0, 0x9d, 0x48, 0xff, 0xed, 0x1b, 0xab, 0x89, 0x60, 0x11, 0x38, 0xfb,
	0x78, 0x47, 0x3c, 0x7d, 0xc7, 0x39, 0xd7, 0x2c, 0x5b, 0xc5, 0x9c, 0x0e, 0xa1, 0xff, 0x31, 0x8c,
	0x15, 0xcf, 0x19, 0x8f, 0xdd, 0x35, 0x26, 0x75, 0x59, 0x1d, 0xa2, 0x36, 0x40, 0x19, 0xae, 0x62,
	0x8e, 0x45, 0x7a, 0xac, 0x86, 0x38, 0xdf, 0x08, 0xf4, 0x67, 0xf3, 0xa9, 0x9b, 0x2e, 0x65, 0xe0,
	0x46, 0x9c, 0xbe, 0x04, 0x38, 0x0b, 0xb8, 0x17, 0x65, 0x22, 0x4c, 0x15, 0x3e, 0xd8, 0x9f, 0xec,
	0x14, 0x4e, 0xe4, 0x68, 0x36, 0xaf, 0x38, 0x56, 0xcb, 0xa3, 0xbb, 0xd0, 0x99, 0xf2, 0xd0, 0x0f,
	0x54, 0x69, 0xa3, 0x8c, 0xe8, 0x3e, 0xf4, 0x4e, 0x75, 0x2b, 0xa6, 0xae, 0x0c, 0xac, 0xd6, 0x90,
	0x1c, 0x6c, 0xb2, 0x0a, 0xd0, 0xde, 0xde, 0x6b, 0x6f, 0x46, 0xe1, 0x4d, 0x9f, 0xa9, 0x03, 0x06,
	0x2a, 0x6d, 0x63, 0xe5, 0x41, 0x55, 0x59, 0xa3, 0x0c, 0x39, 0xe7, 0x37, 0x81, 0xed, 0x9a, 0x66,
	0xc6, 0x65, 0xf6, 0xf0, 0x16, 0xa9, 0xbd, 0xb5, 0x03, 0xed, 0x8b, 0x7a, 0x6f, 0x31, 0xa0, 0xff,
	0x43, 0x1b, 0xc7, 0x83, 0x7a, 0xfa, 0x93, 0xad, 0xfb, 0x12, 0xa8, 0x8b, 0x15, 0x1c, 0x7d, 0x05,
	0xc6, 0x99, 0x58, 0x72, 0x94, 0x36, 0x98, 0xfc, 0x57, 0xc9, 0x78, 0x54, 0x75, 0x74, 0xa9, 0x5c,
	0x25, 0x75, 0x22, 0xc3, 0x74, 0xc7, 0x85, 0xde, 0x03, 0x44, 0x07, 0x00, 0xb3, 0xf9, 0x54, 0xbe,
	0x13, 0x79, 0xe2, 0xc6, 0x66, 0x83, 0x6e, 0x41, 0x4f, 0xc7, 0x8c, 0xab, 0x7c, 0x6d, 0x12, 0xba,
	0x8d, 0x8d, 0x97, 0x8c, 0x7b, 0xe2, 0x9a, 0xe7, 0x66, 0x93, 0x9a, 0xb0, 0xa9, 0x81, 0x93, 0xdc,
	0x0b, 0xc2, 0x6b, 0xbe, 0x34, 0x5b, 0x94, 0xc2, 0x40, 0x23, 0x57, 0x29, 0xff, 0x92, 0x71, 0x4f,
	0xf1, 0xa5, 0x69, 0x38, 0xdf, 0x09, 0x74, 0x67, 0x73, 0x14, 0x2b, 0x2b, 0x87, 0xa4, 0xee, 0x70,
	0x17, 0x3a, 0xe8, 0x42, 0x5a, 0xcd, 0x61, 0xeb, 0x60, 0x93, 0x95, 0x11, 0xb5, 0x60, 0xe3, 0x93,
	0x58, 0xe5, 0xa9, 0x1b, 0x5b, 0x2d, 0x24, 0xee, 0x43, 0xba, 0x07, 0xdd, 0x9c, 0x7b, 0x3c, 0xcc,
	0x94, 0xb4, 0x0c, 0xa4, 0x1e, 0x62, 0xbd, 0x41, 0x97, 0xca, 0xcd, 0x15, 0x96, 0xc4, 0xb9, 0x18,
	0xac, 0x86, 0xe8, 0x89, 0xe5, 0x7a, 0x62, 0x9d, 0xa7, 0x27, 0xa6, 0x39, 0x87, 0xe9, 0x56, 0x60,
	0xfa, 0x89, 0x17, 0x3d, 0xa3, 0x7a, 0x04, 0x1b, 0x17, 0x5c, 0x4a, 0xd7, 0x2f, 0xd6, 0xf4, 0xd1,
	0xda, 0x9d, 0x78, 0x51, 0xc9, 0xb1, 0xfb, 0x24, 0xe7, 0x58, 0xb7, 0xeb, 0xc9, 0x1d, 0x24, 0x8f,
	0x76, 0x90, 0x82, 0x81, 0xeb, 0xd7, 0xc4, 0xf5, 0xc3, 0xb3, 0x73, 0xac, 0xf5, 0x30, 0x11, 0xc7,
	0x0b, 0xf7, 0x59, 0x3d, 0xcf, 0xec, 0xb4, 0x73, 0x05, 0x5b, 0xd5, 0xdd, 0x7f, 0x67, 0xe7, 0x48,
	0xdb, 0xa9, 0x08, 0x3a, 0x80, 0xa6, 0x88, 0xca, 0x7f, 0x74, 0x53, 0x44, 0xd4, 0x84, 0x56, 0x22,
	0xfd, 0xf2, 0x1f, 0xac, 0x8f, 0xa7, 0xe7, 0x3f, 0x6e, 0x6d, 0x72, 0x73, 0x6b, 0x93, 0x5f, 0xb7,
	0x36, 0xf9, 0x7a, 0x67, 0x37, 0x6e, 0xee, 0xec, 0xc6, 0xcf, 0x3b, 0xbb, 0xf1, 0xe1, 0xe8, 0x6f,
	0x3f, 0x58, 0x8b, 0xe2, 0x53, 0xf7, 0xe2, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x23, 0xd0, 0xaa,
	0xe1, 0xfd, 0x04, 0x00, 0x00,
}

func (m *LPPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LPPing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LPPing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgID != 0 {
		i = encodeVarintLp(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x10
	}
	if m.View != 0 {
		i = encodeVarintLp(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LPPong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LPPong) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LPPong) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.View != 0 {
		i = encodeVarintLp(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LPRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LPRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LPRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FilterRule) > 0 {
		i -= len(m.FilterRule)
		copy(dAtA[i:], m.FilterRule)
		i = encodeVarintLp(dAtA, i, uint64(len(m.FilterRule)))
		i--
		dAtA[i] = 0x12
	}
	if m.FilterRelay {
		i--
		if m.FilterRelay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LPHandshake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LPHandshake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LPHandshake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rule != nil {
		{
			size, err := m.Rule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.View != 0 {
		i = encodeVarintLp(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintLp(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintLp(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Checkpoint != nil {
		{
			size, err := m.Checkpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LPHandshakeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LPHandshakeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LPHandshakeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintLp(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x20
	}
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MsgID != 0 {
		i = encodeVarintLp(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x10
	}
	if m.View != 0 {
		i = encodeVarintLp(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LPBlocks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LPBlocks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LPBlocks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rule != nil {
		{
			size, err := m.Rule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.StartBlock != 0 {
		i = encodeVarintLp(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Receipts) > 0 {
		for iNdEx := len(m.Receipts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Receipts[iNdEx])
			copy(dAtA[i:], m.Receipts[iNdEx])
			i = encodeVarintLp(dAtA, i, uint64(len(m.Receipts[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Journal) > 0 {
		for iNdEx := len(m.Journal) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Journal[iNdEx])
			copy(dAtA[i:], m.Journal[iNdEx])
			i = encodeVarintLp(dAtA, i, uint64(len(m.Journal[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Blocks) > 0 {
		for iNdEx := len(m.Blocks) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Blocks[iNdEx])
			copy(dAtA[i:], m.Blocks[iNdEx])
			i = encodeVarintLp(dAtA, i, uint64(len(m.Blocks[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.MsgID != 0 {
		i = encodeVarintLp(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LPBlockAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LPBlockAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LPBlockAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MsgID != 0 {
		i = encodeVarintLp(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LPCheckpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LPCheckpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LPCheckpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintLp(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintLp(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LPRollback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LPRollback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LPRollback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintLp(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.MsgID != 0 {
		i = encodeVarintLp(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LPRollbackAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LPRollbackAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LPRollbackAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MsgID != 0 {
		i = encodeVarintLp(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LPAckMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LPAckMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LPAckMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintLp(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLp(dAtA []byte, offset int, v uint64) int {
	offset -= sovLp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LPPing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovLp(uint64(m.View))
	}
	if m.MsgID != 0 {
		n += 1 + sovLp(uint64(m.MsgID))
	}
	return n
}

func (m *LPPong) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovLp(uint64(m.View))
	}
	return n
}

func (m *LPRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FilterRelay {
		n += 2
	}
	l = len(m.FilterRule)
	if l > 0 {
		n += 1 + l + sovLp(uint64(l))
	}
	return n
}

func (m *LPHandshake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Checkpoint != nil {
		l = m.Checkpoint.Size()
		n += 1 + l + sovLp(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovLp(uint64(m.Height))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovLp(uint64(l))
	}
	if m.View != 0 {
		n += 1 + sovLp(uint64(m.View))
	}
	if m.Rule != nil {
		l = m.Rule.Size()
		n += 1 + l + sovLp(uint64(l))
	}
	return n
}

func (m *LPHandshakeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovLp(uint64(m.View))
	}
	if m.MsgID != 0 {
		n += 1 + sovLp(uint64(m.MsgID))
	}
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovLp(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovLp(uint64(m.Code))
	}
	return n
}

func (m *LPBlocks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgID != 0 {
		n += 1 + sovLp(uint64(m.MsgID))
	}
	if len(m.Blocks) > 0 {
		for _, b := range m.Blocks {
			l = len(b)
			n += 1 + l + sovLp(uint64(l))
		}
	}
	if len(m.Journal) > 0 {
		for _, b := range m.Journal {
			l = len(b)
			n += 1 + l + sovLp(uint64(l))
		}
	}
	if len(m.Receipts) > 0 {
		for _, b := range m.Receipts {
			l = len(b)
			n += 1 + l + sovLp(uint64(l))
		}
	}
	if m.StartBlock != 0 {
		n += 1 + sovLp(uint64(m.StartBlock))
	}
	if m.Rule != nil {
		l = m.Rule.Size()
		n += 1 + l + sovLp(uint64(l))
	}
	return n
}

func (m *LPBlockAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgID != 0 {
		n += 1 + sovLp(uint64(m.MsgID))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovLp(uint64(l))
	}
	return n
}

func (m *LPCheckpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovLp(uint64(m.Height))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovLp(uint64(l))
	}
	return n
}

func (m *LPRollback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgID != 0 {
		n += 1 + sovLp(uint64(m.MsgID))
	}
	if m.Height != 0 {
		n += 1 + sovLp(uint64(m.Height))
	}
	return n
}

func (m *LPRollbackAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgID != 0 {
		n += 1 + sovLp(uint64(m.MsgID))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovLp(uint64(l))
	}
	return n
}

func (m *LPAckMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovLp(uint64(l))
	}
	return n
}

func sovLp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLp(x uint64) (n int) {
	return sovLp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LPPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LPPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LPPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LPPong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LPPong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LPPong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LPRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LPRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LPRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterRelay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FilterRelay = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilterRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LPHandshake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LPHandshake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LPHandshake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Checkpoint == nil {
				m.Checkpoint = &LPCheckpoint{}
			}
			if err := m.Checkpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rule == nil {
				m.Rule = &LPRule{}
			}
			if err := m.Rule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LPHandshakeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LPHandshakeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LPHandshakeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= LPHandshakeResp_StatsCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LPBlocks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LPBlocks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LPBlocks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, make([]byte, postIndex-iNdEx))
			copy(m.Blocks[len(m.Blocks)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Journal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Journal = append(m.Journal, make([]byte, postIndex-iNdEx))
			copy(m.Journal[len(m.Journal)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipts", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receipts = append(m.Receipts, make([]byte, postIndex-iNdEx))
			copy(m.Receipts[len(m.Receipts)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rule == nil {
				m.Rule = &LPRule{}
			}
			if err := m.Rule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LPBlockAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LPBlockAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LPBlockAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &LPAckMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LPCheckpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LPCheckpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LPCheckpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LPRollback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LPRollback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LPRollback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LPRollbackAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LPRollbackAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LPRollbackAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &LPAckMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LPAckMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LPAckMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LPAckMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLp
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthLp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthLp
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLp   = fmt.Errorf("proto: integer overflow")
)
