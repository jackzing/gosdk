// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nvp.proto

package protos

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type NvpHandshakeResp_StatsCode int32

const (
	NvpHandshakeResp_NvpHsRetry      NvpHandshakeResp_StatsCode = 0
	NvpHandshakeResp_NvpHsNormal     NvpHandshakeResp_StatsCode = 1
	NvpHandshakeResp_NvpHsRecover    NvpHandshakeResp_StatsCode = 2
	NvpHandshakeResp_NvpHsUnexpected NvpHandshakeResp_StatsCode = 3
)

var NvpHandshakeResp_StatsCode_name = map[int32]string{
	0: "NvpHsRetry",
	1: "NvpHsNormal",
	2: "NvpHsRecover",
	3: "NvpHsUnexpected",
}

var NvpHandshakeResp_StatsCode_value = map[string]int32{
	"NvpHsRetry":      0,
	"NvpHsNormal":     1,
	"NvpHsRecover":    2,
	"NvpHsUnexpected": 3,
}

func (x NvpHandshakeResp_StatsCode) String() string {
	return proto.EnumName(NvpHandshakeResp_StatsCode_name, int32(x))
}

func (NvpHandshakeResp_StatsCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f10d0fe4016b479, []int{4, 0}
}

type NvpStateUpdateRequest struct {
	NodeHash []byte `protobuf:"bytes,1,opt,name=nodeHash,proto3" json:"nodeHash,omitempty"`
}

func (m *NvpStateUpdateRequest) Reset()         { *m = NvpStateUpdateRequest{} }
func (m *NvpStateUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*NvpStateUpdateRequest) ProtoMessage()    {}
func (*NvpStateUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f10d0fe4016b479, []int{0}
}
func (m *NvpStateUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NvpStateUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NvpStateUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NvpStateUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NvpStateUpdateRequest.Merge(m, src)
}
func (m *NvpStateUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *NvpStateUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NvpStateUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NvpStateUpdateRequest proto.InternalMessageInfo

func (m *NvpStateUpdateRequest) GetNodeHash() []byte {
	if m != nil {
		return m.NodeHash
	}
	return nil
}

type NvpPing struct {
	View  uint64 `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	MsgID uint64 `protobuf:"varint,2,opt,name=msgID,proto3" json:"msgID,omitempty"`
}

func (m *NvpPing) Reset()         { *m = NvpPing{} }
func (m *NvpPing) String() string { return proto.CompactTextString(m) }
func (*NvpPing) ProtoMessage()    {}
func (*NvpPing) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f10d0fe4016b479, []int{1}
}
func (m *NvpPing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NvpPing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NvpPing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NvpPing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NvpPing.Merge(m, src)
}
func (m *NvpPing) XXX_Size() int {
	return m.Size()
}
func (m *NvpPing) XXX_DiscardUnknown() {
	xxx_messageInfo_NvpPing.DiscardUnknown(m)
}

var xxx_messageInfo_NvpPing proto.InternalMessageInfo

func (m *NvpPing) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *NvpPing) GetMsgID() uint64 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

type NvpPong struct {
	View uint64 `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
}

func (m *NvpPong) Reset()         { *m = NvpPong{} }
func (m *NvpPong) String() string { return proto.CompactTextString(m) }
func (*NvpPong) ProtoMessage()    {}
func (*NvpPong) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f10d0fe4016b479, []int{2}
}
func (m *NvpPong) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NvpPong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NvpPong.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NvpPong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NvpPong.Merge(m, src)
}
func (m *NvpPong) XXX_Size() int {
	return m.Size()
}
func (m *NvpPong) XXX_DiscardUnknown() {
	xxx_messageInfo_NvpPong.DiscardUnknown(m)
}

var xxx_messageInfo_NvpPong proto.InternalMessageInfo

func (m *NvpPong) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

type NvpHandshake struct {
	Checkpoint    *NvpCheckpoint `protobuf:"bytes,1,opt,name=Checkpoint,proto3" json:"Checkpoint,omitempty"`
	Height        uint64         `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`
	BlockHash     []byte         `protobuf:"bytes,3,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	View          uint64         `protobuf:"varint,4,opt,name=View,proto3" json:"View,omitempty"`
	Message       *NvpAckMessage `protobuf:"bytes,5,opt,name=Message,proto3" json:"Message,omitempty"`
	EncryptionBit uint32         `protobuf:"varint,6,opt,name=EncryptionBit,proto3" json:"EncryptionBit,omitempty"`
}

func (m *NvpHandshake) Reset()         { *m = NvpHandshake{} }
func (m *NvpHandshake) String() string { return proto.CompactTextString(m) }
func (*NvpHandshake) ProtoMessage()    {}
func (*NvpHandshake) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f10d0fe4016b479, []int{3}
}
func (m *NvpHandshake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NvpHandshake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NvpHandshake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NvpHandshake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NvpHandshake.Merge(m, src)
}
func (m *NvpHandshake) XXX_Size() int {
	return m.Size()
}
func (m *NvpHandshake) XXX_DiscardUnknown() {
	xxx_messageInfo_NvpHandshake.DiscardUnknown(m)
}

var xxx_messageInfo_NvpHandshake proto.InternalMessageInfo

func (m *NvpHandshake) GetCheckpoint() *NvpCheckpoint {
	if m != nil {
		return m.Checkpoint
	}
	return nil
}

func (m *NvpHandshake) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *NvpHandshake) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *NvpHandshake) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *NvpHandshake) GetMessage() *NvpAckMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *NvpHandshake) GetEncryptionBit() uint32 {
	if m != nil {
		return m.EncryptionBit
	}
	return 0
}

type NvpHandshakeResp struct {
	View  uint64                     `protobuf:"varint,1,opt,name=View,proto3" json:"View,omitempty"`
	MsgID uint64                     `protobuf:"varint,2,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	Code  NvpHandshakeResp_StatsCode `protobuf:"varint,3,opt,name=Code,proto3,enum=protos.NvpHandshakeResp_StatsCode" json:"Code,omitempty"`
}

func (m *NvpHandshakeResp) Reset()         { *m = NvpHandshakeResp{} }
func (m *NvpHandshakeResp) String() string { return proto.CompactTextString(m) }
func (*NvpHandshakeResp) ProtoMessage()    {}
func (*NvpHandshakeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f10d0fe4016b479, []int{4}
}
func (m *NvpHandshakeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NvpHandshakeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NvpHandshakeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NvpHandshakeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NvpHandshakeResp.Merge(m, src)
}
func (m *NvpHandshakeResp) XXX_Size() int {
	return m.Size()
}
func (m *NvpHandshakeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NvpHandshakeResp.DiscardUnknown(m)
}

var xxx_messageInfo_NvpHandshakeResp proto.InternalMessageInfo

func (m *NvpHandshakeResp) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *NvpHandshakeResp) GetMsgID() uint64 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *NvpHandshakeResp) GetCode() NvpHandshakeResp_StatsCode {
	if m != nil {
		return m.Code
	}
	return NvpHandshakeResp_NvpHsRetry
}

type NvpGenesis struct {
	MsgID            uint64     `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	Genesis          uint64     `protobuf:"varint,2,opt,name=genesis,proto3" json:"genesis,omitempty"`
	Epoch            *EpochInfo `protobuf:"bytes,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	SnapTxSum        uint64     `protobuf:"varint,4,opt,name=snapTxSum,proto3" json:"snapTxSum,omitempty"`
	FilterID         string     `protobuf:"bytes,5,opt,name=filterID,proto3" json:"filterID,omitempty"`
	Block            []byte     `protobuf:"bytes,6,opt,name=block,proto3" json:"block,omitempty"`
	Journal          []byte     `protobuf:"bytes,7,opt,name=journal,proto3" json:"journal,omitempty"`
	Receipt          []byte     `protobuf:"bytes,8,opt,name=receipt,proto3" json:"receipt,omitempty"`
	SnapInvalidTxSum uint64     `protobuf:"varint,9,opt,name=snapInvalidTxSum,proto3" json:"snapInvalidTxSum,omitempty"`
}

func (m *NvpGenesis) Reset()         { *m = NvpGenesis{} }
func (m *NvpGenesis) String() string { return proto.CompactTextString(m) }
func (*NvpGenesis) ProtoMessage()    {}
func (*NvpGenesis) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f10d0fe4016b479, []int{5}
}
func (m *NvpGenesis) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NvpGenesis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NvpGenesis.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NvpGenesis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NvpGenesis.Merge(m, src)
}
func (m *NvpGenesis) XXX_Size() int {
	return m.Size()
}
func (m *NvpGenesis) XXX_DiscardUnknown() {
	xxx_messageInfo_NvpGenesis.DiscardUnknown(m)
}

var xxx_messageInfo_NvpGenesis proto.InternalMessageInfo

func (m *NvpGenesis) GetMsgID() uint64 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *NvpGenesis) GetGenesis() uint64 {
	if m != nil {
		return m.Genesis
	}
	return 0
}

func (m *NvpGenesis) GetEpoch() *EpochInfo {
	if m != nil {
		return m.Epoch
	}
	return nil
}

func (m *NvpGenesis) GetSnapTxSum() uint64 {
	if m != nil {
		return m.SnapTxSum
	}
	return 0
}

func (m *NvpGenesis) GetFilterID() string {
	if m != nil {
		return m.FilterID
	}
	return ""
}

func (m *NvpGenesis) GetBlock() []byte {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *NvpGenesis) GetJournal() []byte {
	if m != nil {
		return m.Journal
	}
	return nil
}

func (m *NvpGenesis) GetReceipt() []byte {
	if m != nil {
		return m.Receipt
	}
	return nil
}

func (m *NvpGenesis) GetSnapInvalidTxSum() uint64 {
	if m != nil {
		return m.SnapInvalidTxSum
	}
	return 0
}

type NvpLedgerPacket struct {
	MsgID    uint64 `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	FilterID string `protobuf:"bytes,2,opt,name=FilterID,proto3" json:"FilterID,omitempty"`
	Last     bool   `protobuf:"varint,3,opt,name=Last,proto3" json:"Last,omitempty"`
	Payload  []byte `protobuf:"bytes,4,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Extra    []byte `protobuf:"bytes,5,opt,name=Extra,proto3" json:"Extra,omitempty"`
}

func (m *NvpLedgerPacket) Reset()         { *m = NvpLedgerPacket{} }
func (m *NvpLedgerPacket) String() string { return proto.CompactTextString(m) }
func (*NvpLedgerPacket) ProtoMessage()    {}
func (*NvpLedgerPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f10d0fe4016b479, []int{6}
}
func (m *NvpLedgerPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NvpLedgerPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NvpLedgerPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NvpLedgerPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NvpLedgerPacket.Merge(m, src)
}
func (m *NvpLedgerPacket) XXX_Size() int {
	return m.Size()
}
func (m *NvpLedgerPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_NvpLedgerPacket.DiscardUnknown(m)
}

var xxx_messageInfo_NvpLedgerPacket proto.InternalMessageInfo

func (m *NvpLedgerPacket) GetMsgID() uint64 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *NvpLedgerPacket) GetFilterID() string {
	if m != nil {
		return m.FilterID
	}
	return ""
}

func (m *NvpLedgerPacket) GetLast() bool {
	if m != nil {
		return m.Last
	}
	return false
}

func (m *NvpLedgerPacket) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *NvpLedgerPacket) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type NvpLedgerPacketAck struct {
	MsgID   uint64         `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	Last    bool           `protobuf:"varint,2,opt,name=Last,proto3" json:"Last,omitempty"`
	Message *NvpAckMessage `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *NvpLedgerPacketAck) Reset()         { *m = NvpLedgerPacketAck{} }
func (m *NvpLedgerPacketAck) String() string { return proto.CompactTextString(m) }
func (*NvpLedgerPacketAck) ProtoMessage()    {}
func (*NvpLedgerPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f10d0fe4016b479, []int{7}
}
func (m *NvpLedgerPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NvpLedgerPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NvpLedgerPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NvpLedgerPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NvpLedgerPacketAck.Merge(m, src)
}
func (m *NvpLedgerPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *NvpLedgerPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_NvpLedgerPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_NvpLedgerPacketAck proto.InternalMessageInfo

func (m *NvpLedgerPacketAck) GetMsgID() uint64 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *NvpLedgerPacketAck) GetLast() bool {
	if m != nil {
		return m.Last
	}
	return false
}

func (m *NvpLedgerPacketAck) GetMessage() *NvpAckMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type NvpBlocks struct {
	MsgID      uint64   `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	Blocks     [][]byte `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
	Journal    [][]byte `protobuf:"bytes,3,rep,name=journal,proto3" json:"journal,omitempty"`
	Receipts   [][]byte `protobuf:"bytes,4,rep,name=receipts,proto3" json:"receipts,omitempty"`
	StartBlock uint64   `protobuf:"varint,5,opt,name=StartBlock,proto3" json:"StartBlock,omitempty"`
}

func (m *NvpBlocks) Reset()         { *m = NvpBlocks{} }
func (m *NvpBlocks) String() string { return proto.CompactTextString(m) }
func (*NvpBlocks) ProtoMessage()    {}
func (*NvpBlocks) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f10d0fe4016b479, []int{8}
}
func (m *NvpBlocks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NvpBlocks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NvpBlocks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NvpBlocks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NvpBlocks.Merge(m, src)
}
func (m *NvpBlocks) XXX_Size() int {
	return m.Size()
}
func (m *NvpBlocks) XXX_DiscardUnknown() {
	xxx_messageInfo_NvpBlocks.DiscardUnknown(m)
}

var xxx_messageInfo_NvpBlocks proto.InternalMessageInfo

func (m *NvpBlocks) GetMsgID() uint64 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *NvpBlocks) GetBlocks() [][]byte {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (m *NvpBlocks) GetJournal() [][]byte {
	if m != nil {
		return m.Journal
	}
	return nil
}

func (m *NvpBlocks) GetReceipts() [][]byte {
	if m != nil {
		return m.Receipts
	}
	return nil
}

func (m *NvpBlocks) GetStartBlock() uint64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

type NvpBlockAck struct {
	MsgID   uint64         `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	Message *NvpAckMessage `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *NvpBlockAck) Reset()         { *m = NvpBlockAck{} }
func (m *NvpBlockAck) String() string { return proto.CompactTextString(m) }
func (*NvpBlockAck) ProtoMessage()    {}
func (*NvpBlockAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f10d0fe4016b479, []int{9}
}
func (m *NvpBlockAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NvpBlockAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NvpBlockAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NvpBlockAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NvpBlockAck.Merge(m, src)
}
func (m *NvpBlockAck) XXX_Size() int {
	return m.Size()
}
func (m *NvpBlockAck) XXX_DiscardUnknown() {
	xxx_messageInfo_NvpBlockAck.DiscardUnknown(m)
}

var xxx_messageInfo_NvpBlockAck proto.InternalMessageInfo

func (m *NvpBlockAck) GetMsgID() uint64 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *NvpBlockAck) GetMessage() *NvpAckMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type NvpCheckpoint struct {
	Height uint64 `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Hash   []byte `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (m *NvpCheckpoint) Reset()         { *m = NvpCheckpoint{} }
func (m *NvpCheckpoint) String() string { return proto.CompactTextString(m) }
func (*NvpCheckpoint) ProtoMessage()    {}
func (*NvpCheckpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f10d0fe4016b479, []int{10}
}
func (m *NvpCheckpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NvpCheckpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NvpCheckpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NvpCheckpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NvpCheckpoint.Merge(m, src)
}
func (m *NvpCheckpoint) XXX_Size() int {
	return m.Size()
}
func (m *NvpCheckpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_NvpCheckpoint.DiscardUnknown(m)
}

var xxx_messageInfo_NvpCheckpoint proto.InternalMessageInfo

func (m *NvpCheckpoint) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *NvpCheckpoint) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type NvpRollback struct {
	MsgID  uint64 `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`
}

func (m *NvpRollback) Reset()         { *m = NvpRollback{} }
func (m *NvpRollback) String() string { return proto.CompactTextString(m) }
func (*NvpRollback) ProtoMessage()    {}
func (*NvpRollback) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f10d0fe4016b479, []int{11}
}
func (m *NvpRollback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NvpRollback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NvpRollback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NvpRollback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NvpRollback.Merge(m, src)
}
func (m *NvpRollback) XXX_Size() int {
	return m.Size()
}
func (m *NvpRollback) XXX_DiscardUnknown() {
	xxx_messageInfo_NvpRollback.DiscardUnknown(m)
}

var xxx_messageInfo_NvpRollback proto.InternalMessageInfo

func (m *NvpRollback) GetMsgID() uint64 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *NvpRollback) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type NvpRollbackAck struct {
	MsgID   uint64         `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	Message *NvpAckMessage `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *NvpRollbackAck) Reset()         { *m = NvpRollbackAck{} }
func (m *NvpRollbackAck) String() string { return proto.CompactTextString(m) }
func (*NvpRollbackAck) ProtoMessage()    {}
func (*NvpRollbackAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f10d0fe4016b479, []int{12}
}
func (m *NvpRollbackAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NvpRollbackAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NvpRollbackAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NvpRollbackAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NvpRollbackAck.Merge(m, src)
}
func (m *NvpRollbackAck) XXX_Size() int {
	return m.Size()
}
func (m *NvpRollbackAck) XXX_DiscardUnknown() {
	xxx_messageInfo_NvpRollbackAck.DiscardUnknown(m)
}

var xxx_messageInfo_NvpRollbackAck proto.InternalMessageInfo

func (m *NvpRollbackAck) GetMsgID() uint64 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *NvpRollbackAck) GetMessage() *NvpAckMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type NvpAckMessage struct {
	Ok  bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *NvpAckMessage) Reset()         { *m = NvpAckMessage{} }
func (m *NvpAckMessage) String() string { return proto.CompactTextString(m) }
func (*NvpAckMessage) ProtoMessage()    {}
func (*NvpAckMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f10d0fe4016b479, []int{13}
}
func (m *NvpAckMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NvpAckMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NvpAckMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NvpAckMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NvpAckMessage.Merge(m, src)
}
func (m *NvpAckMessage) XXX_Size() int {
	return m.Size()
}
func (m *NvpAckMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NvpAckMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NvpAckMessage proto.InternalMessageInfo

func (m *NvpAckMessage) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *NvpAckMessage) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterEnum("protos.NvpHandshakeResp_StatsCode", NvpHandshakeResp_StatsCode_name, NvpHandshakeResp_StatsCode_value)
	proto.RegisterType((*NvpStateUpdateRequest)(nil), "protos.NvpStateUpdateRequest")
	proto.RegisterType((*NvpPing)(nil), "protos.NvpPing")
	proto.RegisterType((*NvpPong)(nil), "protos.NvpPong")
	proto.RegisterType((*NvpHandshake)(nil), "protos.NvpHandshake")
	proto.RegisterType((*NvpHandshakeResp)(nil), "protos.NvpHandshakeResp")
	proto.RegisterType((*NvpGenesis)(nil), "protos.NvpGenesis")
	proto.RegisterType((*NvpLedgerPacket)(nil), "protos.NvpLedgerPacket")
	proto.RegisterType((*NvpLedgerPacketAck)(nil), "protos.NvpLedgerPacketAck")
	proto.RegisterType((*NvpBlocks)(nil), "protos.NvpBlocks")
	proto.RegisterType((*NvpBlockAck)(nil), "protos.NvpBlockAck")
	proto.RegisterType((*NvpCheckpoint)(nil), "protos.NvpCheckpoint")
	proto.RegisterType((*NvpRollback)(nil), "protos.NvpRollback")
	proto.RegisterType((*NvpRollbackAck)(nil), "protos.NvpRollbackAck")
	proto.RegisterType((*NvpAckMessage)(nil), "protos.NvpAckMessage")
}

func init() { proto.RegisterFile("nvp.proto", fileDescriptor_3f10d0fe4016b479) }

var fileDescriptor_3f10d0fe4016b479 = []byte{
	// 798 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xae, 0x9d, 0xb4, 0x4d, 0x5e, 0xd3, 0xae, 0x19, 0x76, 0x57, 0x56, 0x05, 0xd1, 0xca, 0x42,
	0xa2, 0x42, 0xda, 0x06, 0x5a, 0xc1, 0x65, 0x4f, 0xed, 0x6e, 0xa1, 0x45, 0xbb, 0x51, 0x35, 0xd9,
	0x05, 0x89, 0xdb, 0xc4, 0x9e, 0xb5, 0x8d, 0x1d, 0xcf, 0xe0, 0x99, 0x98, 0xe6, 0x17, 0x70, 0x84,
	0x0b, 0xff, 0x09, 0x6e, 0x7b, 0xe4, 0x88, 0x5a, 0x89, 0xdf, 0x81, 0xe6, 0x8d, 0x9d, 0x38, 0x2c,
	0x91, 0x16, 0x89, 0x53, 0xe6, 0x7b, 0xef, 0xcd, 0xbc, 0xef, 0x9b, 0xef, 0x79, 0x02, 0xfd, 0xa2,
	0x92, 0xc7, 0xb2, 0x14, 0x5a, 0x90, 0x1d, 0xfc, 0x51, 0x87, 0x67, 0x71, 0xaa, 0x93, 0xf9, 0xf4,
	0x38, 0x14, 0xb3, 0x51, 0xb2, 0x90, 0xbc, 0x0c, 0x13, 0x96, 0x16, 0xa3, 0x58, 0x3c, 0x4e, 0x64,
	0xf8, 0x38, 0x14, 0xb3, 0x99, 0x28, 0x46, 0x7a, 0x21, 0xb9, 0x1a, 0xd9, 0x1d, 0xa3, 0x30, 0xe1,
	0x61, 0x26, 0x45, 0x5a, 0x68, 0x7b, 0x54, 0x70, 0x0a, 0x0f, 0xc6, 0x95, 0x9c, 0x68, 0xa6, 0xf9,
	0x2b, 0x19, 0x31, 0xcd, 0x29, 0xff, 0x61, 0xce, 0x95, 0x26, 0x87, 0xd0, 0x2b, 0x44, 0xc4, 0x2f,
	0x99, 0x4a, 0x7c, 0xe7, 0x91, 0x73, 0x34, 0xa0, 0x4b, 0x1c, 0x9c, 0xc2, 0xee, 0xb8, 0x92, 0xd7,
	0x69, 0x11, 0x13, 0x02, 0xdd, 0x2a, 0xe5, 0x3f, 0x62, 0x49, 0x97, 0xe2, 0x9a, 0xdc, 0x87, 0xed,
	0x99, 0x8a, 0xaf, 0x9e, 0xf9, 0x2e, 0x06, 0x2d, 0x08, 0x3e, 0xb4, 0x9b, 0xc4, 0xbf, 0x6f, 0x0a,
	0xfe, 0x72, 0x60, 0x30, 0xae, 0xe4, 0x25, 0x2b, 0x22, 0x95, 0xb0, 0x8c, 0x93, 0xcf, 0x01, 0x9e,
	0x2e, 0xd9, 0x62, 0xe9, 0xde, 0xc9, 0x03, 0xcb, 0x5a, 0x1d, 0x8f, 0x2b, 0xb9, 0x4a, 0xd2, 0x56,
	0x21, 0x79, 0x08, 0x3b, 0x97, 0x3c, 0x8d, 0x13, 0x5d, 0x77, 0xaf, 0x11, 0xf9, 0x00, 0xfa, 0xe7,
	0xb9, 0x08, 0x33, 0x14, 0xd4, 0x41, 0x41, 0xab, 0x80, 0x61, 0xf4, 0x8d, 0x61, 0xd4, 0xb5, 0x8c,
	0xcc, 0x9a, 0x8c, 0x60, 0xf7, 0x05, 0x57, 0x8a, 0xc5, 0xdc, 0xdf, 0x7e, 0xab, 0xfb, 0x59, 0x98,
	0xd5, 0x49, 0xda, 0x54, 0x91, 0x8f, 0x60, 0xff, 0xa2, 0x08, 0xcb, 0x85, 0xd4, 0xa9, 0x28, 0xce,
	0x53, 0xed, 0xef, 0x3c, 0x72, 0x8e, 0xf6, 0xe9, 0x7a, 0x30, 0xf8, 0xdd, 0x01, 0xaf, 0x2d, 0x94,
	0x72, 0x25, 0x97, 0xfd, 0x9d, 0x56, 0xff, 0xfb, 0xb0, 0xfd, 0xa2, 0x7d, 0x8d, 0x08, 0xc8, 0x17,
	0xd0, 0x7d, 0x2a, 0x22, 0x8e, 0x12, 0x0e, 0x4e, 0x82, 0x16, 0xa5, 0xb5, 0x13, 0x8f, 0x8d, 0xa5,
	0xca, 0x54, 0x52, 0xac, 0x0f, 0x26, 0xd0, 0x5f, 0x86, 0xc8, 0x01, 0x80, 0xd9, 0xa0, 0x28, 0xd7,
	0xe5, 0xc2, 0xdb, 0x22, 0xf7, 0x60, 0x0f, 0xf1, 0x58, 0x94, 0x33, 0x96, 0x7b, 0x0e, 0xf1, 0xac,
	0x19, 0x8a, 0xf2, 0x50, 0x54, 0xbc, 0xf4, 0x5c, 0xf2, 0x3e, 0xdc, 0xc3, 0xc8, 0xab, 0x82, 0xdf,
	0x48, 0x1e, 0x6a, 0x1e, 0x79, 0x9d, 0xe0, 0x57, 0x17, 0x0f, 0xfa, 0x8a, 0x17, 0x5c, 0xa5, 0x6a,
	0xc5, 0xd8, 0x69, 0x33, 0xf6, 0x61, 0x37, 0xb6, 0x05, 0xb5, 0x92, 0x06, 0x92, 0x8f, 0x61, 0x9b,
	0x4b, 0x11, 0x5a, 0x3f, 0xf6, 0x4e, 0xde, 0x6b, 0xc4, 0x5c, 0x98, 0xe0, 0x55, 0xf1, 0x5a, 0x50,
	0x9b, 0x37, 0xe6, 0xa9, 0x82, 0xc9, 0x97, 0x37, 0x93, 0xf9, 0xac, 0xf6, 0x68, 0x15, 0x30, 0xa3,
	0xfa, 0x3a, 0xcd, 0x35, 0x2f, 0xaf, 0x9e, 0xa1, 0x53, 0x7d, 0xba, 0xc4, 0x86, 0xd2, 0xd4, 0xb8,
	0x8c, 0x5e, 0x0c, 0xa8, 0x05, 0x86, 0xd2, 0xf7, 0x62, 0x5e, 0x16, 0x2c, 0xf7, 0x77, 0x31, 0xde,
	0x40, 0x93, 0x29, 0x79, 0xc8, 0x53, 0xa9, 0xfd, 0x9e, 0xcd, 0xd4, 0x90, 0x7c, 0x02, 0x9e, 0x69,
	0x79, 0x55, 0x54, 0x2c, 0x4f, 0x23, 0x4b, 0xa5, 0x8f, 0x54, 0xde, 0x8a, 0x07, 0x3f, 0x39, 0x78,
	0x5b, 0xcf, 0x79, 0x14, 0xf3, 0xf2, 0x9a, 0x85, 0x19, 0xd7, 0x1b, 0x2e, 0xe7, 0x10, 0x7a, 0x5f,
	0x36, 0xdc, 0x5d, 0xcb, 0xbd, 0xc1, 0x66, 0x28, 0x9e, 0x33, 0xa5, 0xf1, 0x76, 0x7a, 0x14, 0xd7,
	0x86, 0xdf, 0x35, 0x5b, 0xe4, 0x82, 0x45, 0x78, 0x0f, 0x03, 0xda, 0x40, 0x73, 0xfe, 0xc5, 0x8d,
	0x2e, 0x19, 0x5e, 0xc1, 0x80, 0x5a, 0x10, 0x08, 0x20, 0xff, 0x20, 0x72, 0x16, 0x66, 0x1b, 0xb8,
	0x34, 0xfd, 0xdc, 0x56, 0xbf, 0xd6, 0x47, 0xd0, 0x79, 0x97, 0x8f, 0x20, 0xf8, 0xd9, 0x81, 0xfe,
	0xb8, 0x92, 0xf8, 0x69, 0x6d, 0x9a, 0x88, 0x87, 0xb0, 0x83, 0x3e, 0x98, 0x81, 0xe8, 0x1c, 0x0d,
	0x68, 0x8d, 0xda, 0xb6, 0x74, 0x30, 0xb1, 0xb4, 0xe5, 0x10, 0x7a, 0xb5, 0x0f, 0xca, 0xef, 0x62,
	0x6a, 0x89, 0xc9, 0x10, 0x60, 0xa2, 0x59, 0xa9, 0xb1, 0x25, 0xaa, 0xef, 0xd2, 0x56, 0x24, 0x78,
	0x89, 0xc3, 0x8d, 0xeb, 0xcd, 0xda, 0x5b, 0x3a, 0xdd, 0x77, 0xd2, 0xf9, 0x04, 0xf6, 0xd7, 0x1e,
	0xa1, 0xd6, 0xc3, 0xe3, 0xac, 0x3d, 0x3c, 0x04, 0xba, 0xf8, 0xe6, 0xb8, 0x68, 0x0b, 0xae, 0x83,
	0x27, 0x48, 0x89, 0x8a, 0x3c, 0x9f, 0xb2, 0x8d, 0x94, 0x36, 0xbc, 0x64, 0xc1, 0xb7, 0x70, 0xd0,
	0xda, 0xfc, 0x3f, 0x4a, 0xfa, 0x0c, 0x25, 0xad, 0x32, 0xe4, 0x00, 0x5c, 0x91, 0xe1, 0xa1, 0x3d,
	0xea, 0x8a, 0x8c, 0x78, 0xd0, 0x99, 0xa9, 0xb8, 0x9e, 0x53, 0xb3, 0x3c, 0xff, 0xfa, 0xb7, 0xdb,
	0xa1, 0xf3, 0xe6, 0x76, 0xe8, 0xfc, 0x79, 0x3b, 0x74, 0x7e, 0xb9, 0x1b, 0x6e, 0xbd, 0xb9, 0x1b,
	0x6e, 0xfd, 0x71, 0x37, 0xdc, 0xfa, 0xee, 0xd3, 0xff, 0xfa, 0xdf, 0x34, 0xb5, 0xff, 0x6a, 0xa7,
	0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xd2, 0x22, 0x4d, 0xe9, 0x06, 0x00, 0x00,
}

func (m *NvpStateUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NvpStateUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NvpStateUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeHash) > 0 {
		i -= len(m.NodeHash)
		copy(dAtA[i:], m.NodeHash)
		i = encodeVarintNvp(dAtA, i, uint64(len(m.NodeHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NvpPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NvpPing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NvpPing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgID != 0 {
		i = encodeVarintNvp(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x10
	}
	if m.View != 0 {
		i = encodeVarintNvp(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NvpPong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NvpPong) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NvpPong) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.View != 0 {
		i = encodeVarintNvp(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NvpHandshake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NvpHandshake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NvpHandshake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EncryptionBit != 0 {
		i = encodeVarintNvp(dAtA, i, uint64(m.EncryptionBit))
		i--
		dAtA[i] = 0x30
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNvp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.View != 0 {
		i = encodeVarintNvp(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintNvp(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintNvp(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Checkpoint != nil {
		{
			size, err := m.Checkpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNvp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NvpHandshakeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NvpHandshakeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NvpHandshakeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintNvp(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x18
	}
	if m.MsgID != 0 {
		i = encodeVarintNvp(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x10
	}
	if m.View != 0 {
		i = encodeVarintNvp(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NvpGenesis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NvpGenesis) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NvpGenesis) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SnapInvalidTxSum != 0 {
		i = encodeVarintNvp(dAtA, i, uint64(m.SnapInvalidTxSum))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Receipt) > 0 {
		i -= len(m.Receipt)
		copy(dAtA[i:], m.Receipt)
		i = encodeVarintNvp(dAtA, i, uint64(len(m.Receipt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Journal) > 0 {
		i -= len(m.Journal)
		copy(dAtA[i:], m.Journal)
		i = encodeVarintNvp(dAtA, i, uint64(len(m.Journal)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Block) > 0 {
		i -= len(m.Block)
		copy(dAtA[i:], m.Block)
		i = encodeVarintNvp(dAtA, i, uint64(len(m.Block)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FilterID) > 0 {
		i -= len(m.FilterID)
		copy(dAtA[i:], m.FilterID)
		i = encodeVarintNvp(dAtA, i, uint64(len(m.FilterID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SnapTxSum != 0 {
		i = encodeVarintNvp(dAtA, i, uint64(m.SnapTxSum))
		i--
		dAtA[i] = 0x20
	}
	if m.Epoch != nil {
		{
			size, err := m.Epoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNvp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Genesis != 0 {
		i = encodeVarintNvp(dAtA, i, uint64(m.Genesis))
		i--
		dAtA[i] = 0x10
	}
	if m.MsgID != 0 {
		i = encodeVarintNvp(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NvpLedgerPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NvpLedgerPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NvpLedgerPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintNvp(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintNvp(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x22
	}
	if m.Last {
		i--
		if m.Last {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.FilterID) > 0 {
		i -= len(m.FilterID)
		copy(dAtA[i:], m.FilterID)
		i = encodeVarintNvp(dAtA, i, uint64(len(m.FilterID)))
		i--
		dAtA[i] = 0x12
	}
	if m.MsgID != 0 {
		i = encodeVarintNvp(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NvpLedgerPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NvpLedgerPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NvpLedgerPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNvp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Last {
		i--
		if m.Last {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.MsgID != 0 {
		i = encodeVarintNvp(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NvpBlocks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NvpBlocks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NvpBlocks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartBlock != 0 {
		i = encodeVarintNvp(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Receipts) > 0 {
		for iNdEx := len(m.Receipts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Receipts[iNdEx])
			copy(dAtA[i:], m.Receipts[iNdEx])
			i = encodeVarintNvp(dAtA, i, uint64(len(m.Receipts[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Journal) > 0 {
		for iNdEx := len(m.Journal) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Journal[iNdEx])
			copy(dAtA[i:], m.Journal[iNdEx])
			i = encodeVarintNvp(dAtA, i, uint64(len(m.Journal[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Blocks) > 0 {
		for iNdEx := len(m.Blocks) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Blocks[iNdEx])
			copy(dAtA[i:], m.Blocks[iNdEx])
			i = encodeVarintNvp(dAtA, i, uint64(len(m.Blocks[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.MsgID != 0 {
		i = encodeVarintNvp(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NvpBlockAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NvpBlockAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NvpBlockAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNvp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MsgID != 0 {
		i = encodeVarintNvp(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NvpCheckpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NvpCheckpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NvpCheckpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintNvp(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintNvp(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NvpRollback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NvpRollback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NvpRollback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintNvp(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.MsgID != 0 {
		i = encodeVarintNvp(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NvpRollbackAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NvpRollbackAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NvpRollbackAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNvp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MsgID != 0 {
		i = encodeVarintNvp(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NvpAckMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NvpAckMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NvpAckMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintNvp(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNvp(dAtA []byte, offset int, v uint64) int {
	offset -= sovNvp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NvpStateUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeHash)
	if l > 0 {
		n += 1 + l + sovNvp(uint64(l))
	}
	return n
}

func (m *NvpPing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovNvp(uint64(m.View))
	}
	if m.MsgID != 0 {
		n += 1 + sovNvp(uint64(m.MsgID))
	}
	return n
}

func (m *NvpPong) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovNvp(uint64(m.View))
	}
	return n
}

func (m *NvpHandshake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Checkpoint != nil {
		l = m.Checkpoint.Size()
		n += 1 + l + sovNvp(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovNvp(uint64(m.Height))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovNvp(uint64(l))
	}
	if m.View != 0 {
		n += 1 + sovNvp(uint64(m.View))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovNvp(uint64(l))
	}
	if m.EncryptionBit != 0 {
		n += 1 + sovNvp(uint64(m.EncryptionBit))
	}
	return n
}

func (m *NvpHandshakeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovNvp(uint64(m.View))
	}
	if m.MsgID != 0 {
		n += 1 + sovNvp(uint64(m.MsgID))
	}
	if m.Code != 0 {
		n += 1 + sovNvp(uint64(m.Code))
	}
	return n
}

func (m *NvpGenesis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgID != 0 {
		n += 1 + sovNvp(uint64(m.MsgID))
	}
	if m.Genesis != 0 {
		n += 1 + sovNvp(uint64(m.Genesis))
	}
	if m.Epoch != nil {
		l = m.Epoch.Size()
		n += 1 + l + sovNvp(uint64(l))
	}
	if m.SnapTxSum != 0 {
		n += 1 + sovNvp(uint64(m.SnapTxSum))
	}
	l = len(m.FilterID)
	if l > 0 {
		n += 1 + l + sovNvp(uint64(l))
	}
	l = len(m.Block)
	if l > 0 {
		n += 1 + l + sovNvp(uint64(l))
	}
	l = len(m.Journal)
	if l > 0 {
		n += 1 + l + sovNvp(uint64(l))
	}
	l = len(m.Receipt)
	if l > 0 {
		n += 1 + l + sovNvp(uint64(l))
	}
	if m.SnapInvalidTxSum != 0 {
		n += 1 + sovNvp(uint64(m.SnapInvalidTxSum))
	}
	return n
}

func (m *NvpLedgerPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgID != 0 {
		n += 1 + sovNvp(uint64(m.MsgID))
	}
	l = len(m.FilterID)
	if l > 0 {
		n += 1 + l + sovNvp(uint64(l))
	}
	if m.Last {
		n += 2
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovNvp(uint64(l))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovNvp(uint64(l))
	}
	return n
}

func (m *NvpLedgerPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgID != 0 {
		n += 1 + sovNvp(uint64(m.MsgID))
	}
	if m.Last {
		n += 2
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovNvp(uint64(l))
	}
	return n
}

func (m *NvpBlocks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgID != 0 {
		n += 1 + sovNvp(uint64(m.MsgID))
	}
	if len(m.Blocks) > 0 {
		for _, b := range m.Blocks {
			l = len(b)
			n += 1 + l + sovNvp(uint64(l))
		}
	}
	if len(m.Journal) > 0 {
		for _, b := range m.Journal {
			l = len(b)
			n += 1 + l + sovNvp(uint64(l))
		}
	}
	if len(m.Receipts) > 0 {
		for _, b := range m.Receipts {
			l = len(b)
			n += 1 + l + sovNvp(uint64(l))
		}
	}
	if m.StartBlock != 0 {
		n += 1 + sovNvp(uint64(m.StartBlock))
	}
	return n
}

func (m *NvpBlockAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgID != 0 {
		n += 1 + sovNvp(uint64(m.MsgID))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovNvp(uint64(l))
	}
	return n
}

func (m *NvpCheckpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovNvp(uint64(m.Height))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovNvp(uint64(l))
	}
	return n
}

func (m *NvpRollback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgID != 0 {
		n += 1 + sovNvp(uint64(m.MsgID))
	}
	if m.Height != 0 {
		n += 1 + sovNvp(uint64(m.Height))
	}
	return n
}

func (m *NvpRollbackAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgID != 0 {
		n += 1 + sovNvp(uint64(m.MsgID))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovNvp(uint64(l))
	}
	return n
}

func (m *NvpAckMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovNvp(uint64(l))
	}
	return n
}

func sovNvp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNvp(x uint64) (n int) {
	return sovNvp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NvpStateUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNvp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NvpStateUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NvpStateUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNvp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNvp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeHash = append(m.NodeHash[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeHash == nil {
				m.NodeHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNvp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NvpPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNvp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NvpPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NvpPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNvp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NvpPong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNvp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NvpPong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NvpPong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNvp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NvpHandshake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNvp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NvpHandshake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NvpHandshake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNvp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNvp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Checkpoint == nil {
				m.Checkpoint = &NvpCheckpoint{}
			}
			if err := m.Checkpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNvp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNvp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNvp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNvp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &NvpAckMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionBit", wireType)
			}
			m.EncryptionBit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptionBit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNvp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NvpHandshakeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNvp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NvpHandshakeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NvpHandshakeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= NvpHandshakeResp_StatsCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNvp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NvpGenesis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNvp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NvpGenesis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NvpGenesis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Genesis", wireType)
			}
			m.Genesis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Genesis |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNvp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNvp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Epoch == nil {
				m.Epoch = &EpochInfo{}
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapTxSum", wireType)
			}
			m.SnapTxSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapTxSum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNvp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNvp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNvp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNvp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Block = append(m.Block[:0], dAtA[iNdEx:postIndex]...)
			if m.Block == nil {
				m.Block = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Journal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNvp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNvp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Journal = append(m.Journal[:0], dAtA[iNdEx:postIndex]...)
			if m.Journal == nil {
				m.Journal = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNvp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNvp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receipt = append(m.Receipt[:0], dAtA[iNdEx:postIndex]...)
			if m.Receipt == nil {
				m.Receipt = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapInvalidTxSum", wireType)
			}
			m.SnapInvalidTxSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapInvalidTxSum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNvp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NvpLedgerPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNvp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NvpLedgerPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NvpLedgerPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNvp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNvp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Last = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNvp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNvp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNvp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNvp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNvp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NvpLedgerPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNvp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NvpLedgerPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NvpLedgerPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Last = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNvp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNvp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &NvpAckMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNvp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NvpBlocks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNvp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NvpBlocks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NvpBlocks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNvp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNvp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, make([]byte, postIndex-iNdEx))
			copy(m.Blocks[len(m.Blocks)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Journal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNvp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNvp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Journal = append(m.Journal, make([]byte, postIndex-iNdEx))
			copy(m.Journal[len(m.Journal)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipts", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNvp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNvp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receipts = append(m.Receipts, make([]byte, postIndex-iNdEx))
			copy(m.Receipts[len(m.Receipts)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNvp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NvpBlockAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNvp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NvpBlockAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NvpBlockAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNvp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNvp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &NvpAckMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNvp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NvpCheckpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNvp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NvpCheckpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NvpCheckpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNvp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNvp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNvp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NvpRollback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNvp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NvpRollback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NvpRollback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNvp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NvpRollbackAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNvp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NvpRollbackAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NvpRollbackAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNvp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNvp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &NvpAckMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNvp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NvpAckMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNvp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NvpAckMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NvpAckMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNvp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNvp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNvp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNvp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNvp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNvp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNvp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNvp
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthNvp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNvp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNvp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthNvp
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNvp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNvp   = fmt.Errorf("proto: integer overflow")
)
